/*
 Navicat Premium Data Transfer

 Source Server         : mysql
 Source Server Type    : MySQL
 Source Server Version : 50542
 Source Host           : localhost:3306
 Source Schema         : sblog

 Target Server Type    : MySQL
 Target Server Version : 50542
 File Encoding         : 65001

 Date: 09/01/2021 16:13:21
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for admin
-- ----------------------------
DROP TABLE IF EXISTS `admin`;
CREATE TABLE `admin`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 1206227 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of admin
-- ----------------------------
INSERT INTO `admin` VALUES (10080, 'hty', '111111');

-- ----------------------------
-- Table structure for admin_login_log
-- ----------------------------
DROP TABLE IF EXISTS `admin_login_log`;
CREATE TABLE `admin_login_log`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '日志ID',
  `admin_id` int(11) NOT NULL COMMENT '管理员ID',
  `date` timestamp NULL DEFAULT NULL COMMENT '登陆日期',
  `ip` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '登陆IP',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 50 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of admin_login_log
-- ----------------------------
INSERT INTO `admin_login_log` VALUES (42, 10080, '2021-01-01 13:26:24', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (43, 10080, '2021-01-01 16:43:59', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (44, 10080, '2021-01-04 16:41:06', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (45, 10080, '2021-01-08 13:08:34', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (46, 10080, '2021-01-08 13:12:19', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (47, 10080, '2021-01-08 13:35:58', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (48, 10080, '2021-01-08 14:46:58', '0:0:0:0:0:0:0:1');
INSERT INTO `admin_login_log` VALUES (49, 10080, '2021-01-08 14:59:36', '0:0:0:0:0:0:0:1');

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `keywords` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '关键字',
  `desci` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '描述',
  `pic` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '图片地址',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `click` mediumint(9) NOT NULL DEFAULT 0 COMMENT '点击量',
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '发表日期',
  `catalog_id` mediumint(9) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 112 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (98, 'http的请求与响应-----content-type', '', 'content-type 指请求消息头的中请求消息数据的格式\r\n\r\n有三种用法。', NULL, '<p style=\"margin: 10px auto;\">content-type 指请求消息头的中请求消息数据的格式<br/><br/>有三种用法<br/><br/>第一种：设置在request header的参数中<br/><br/>js中可以在发送请求前在请求消息头中设置content-type<br/>var xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;);<br/>xhr.open(method, url, true);<br/>xhr.onreadystatechange = function () {};<br/>xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;);<br/>xhr.send(params);<br/><br/>第二种：设置在发送请求页面的header中<br/>&lt;header&gt;<br/>&nbsp; &lt;meta content=&quot;text/html&quot; charset=&quot;utf-8&quot;/&gt;<br/>&lt;/header&gt;<br/>第三种：设置在form表单提交的enctype参数中<br/>&lt;form enctype=&quot;multipart/form-data&quot;&gt;&lt;/form&gt;<br/><br/>格式 Content-Type: type/subtype;parameter;<br/>例如 Content-Type: text/html;charset:utf-8;<br/>&nbsp;<br/>type:text,或者application,或者*<br/>&nbsp;&nbsp;&nbsp;&nbsp; text-------主类型是文本类型<br/>&nbsp;&nbsp;&nbsp;&nbsp; application----主类型是应用<br/>&nbsp;&nbsp;&nbsp;&nbsp; *--------------所有类型都适用<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br/>subtype:子类型<br/>&nbsp;&nbsp; &nbsp;*---------------所有类型都适用<br/>&nbsp;&nbsp;&nbsp; html------------子类型为html格式<br/>&nbsp;&nbsp;&nbsp; xml-------------子类型为xml<br/>&nbsp;&nbsp;&nbsp; png-------------子类型为png格式<br/>&nbsp;&nbsp; &nbsp;<br/>parameter：参数，常用的是编码方式参数charset:utf-8<br/><br/>type/subtype 即是互联网媒体类型，也叫作MIME-Type<br/><br/>常见的媒体类型<br/><br/>主类型是text的<br/><br/>&nbsp;&nbsp;&nbsp; text/html ： HTML格式<br/>&nbsp;&nbsp;&nbsp; text/plain ：纯文本格式&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp; text/xml ：&nbsp; XML格式<br/>&nbsp;&nbsp;&nbsp; image/png： png图片格式<br/>&nbsp;&nbsp; &nbsp;<br/>主类型是application的<br/><br/>&nbsp;&nbsp;&nbsp; application/xhtml+xml ：XHTML格式<br/>&nbsp;&nbsp;&nbsp; application/xml&nbsp;&nbsp;&nbsp;&nbsp; ： XML数据格式<br/>&nbsp;&nbsp;&nbsp; application/json&nbsp;&nbsp;&nbsp; ： JSON数据格式<br/>&nbsp;&nbsp;&nbsp; application/octet-stream ： 二进制流数据（如常见的文件下载）<br/><br/>特殊的用于上传文件时的mime-type<br/>&nbsp;&nbsp;&nbsp; multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式<br/>&nbsp;&nbsp; &nbsp;application/x-www-form-urlencoded: 表单提交默认的mime-type,设置在enctype参数中，表单数据将会以k1=v1&amp;k1=v1&amp;k1=v1的形式发送到服务器<br/>&nbsp;&nbsp; &nbsp;<br/>mime-type的设置与文件类型，文件后缀名密切相关，如tomcat中的web.xml文件中就有详尽的mime-mappping设置<br/>详细的mime-type列表：http://www.w3school.com.cn/media/media_mimeref.asp</p><p>标签:&nbsp;<a href=\"http://www.cnblogs.com/carolddz/tag/web%E5%89%8D%E7%AB%AF/\" style=\"color: rgb(159, 130, 72); text-decoration-line: none;\">web前端</a>,&nbsp;<a href=\"http://www.cnblogs.com/carolddz/tag/http%E8%AF%B7%E6%B1%82/\" style=\"color: rgb(159, 130, 72); text-decoration-line: none;\">http请求</a>,&nbsp;<a href=\"http://www.cnblogs.com/carolddz/tag/%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B/\" style=\"color: rgb(159, 130, 72); text-decoration-line: none;\">媒体类型</a>,&nbsp;<a href=\"http://www.cnblogs.com/carolddz/tag/content-type/\" style=\"color: rgb(159, 130, 72); text-decoration-line: none;\">content-type</a></p><p><br/></p>', 90, '2020-12-31 13:36:46', 0);
INSERT INTO `article` VALUES (99, '快速定位生产故障问题-JVM进程CPU占用率高于100%', '', '这几年作为技术leader处理过的线上紧急问题，掐指一算应该有不下10次吧（说多了都是泪啊~~）。所以挡刀救火也是leader的必备技能！本文主要分享遇到“JVM进程CPU占用率超100%”时如何快速定位原因。', NULL, '<h1 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 36px; color: rgb(79, 79, 79); font-size: 28px; white-space: normal; background-color: rgb(255, 255, 255);\">前言</h1><blockquote style=\"box-sizing: border-box; margin: 0px 0px 24px; padding: 16px; border-left: 8px solid rgb(221, 223, 228); background: rgb(238, 240, 244); border-radius: 0px 5px 5px 0px; overflow: auto; word-wrap: normal; word-break: normal; color: rgb(63, 63, 63); font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; font-size: 14px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-wrap: break-word; word-break: normal;\">古语有云：人在江湖漂，哪有不挨刀。</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">这几年作为技术leader处理过的线上紧急问题，掐指一算应该有不下10次吧（<span style=\"box-sizing: border-box; font-weight: 700;\">说多了都是泪啊~~</span>）。所以挡刀救火也是leader的必备技能！本文主要分享遇到“<span style=\"box-sizing: border-box; font-weight: 700;\">JVM进程CPU占用率超100%</span>”时如何快速定位原因。</p><h1 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 36px; color: rgb(79, 79, 79); font-size: 28px; white-space: normal; background-color: rgb(255, 255, 255);\"><a target=\"_blank\" style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1. 生产故障-JVM进程CPU占用率高于100%</h1><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">某日，运维同学反馈生产环境有故障，某个JVM进程CPU负载一直居高不下。登入服务器用 top -c 命令查看如下：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 24px; font-family: Consolas, Inconsolata, Courier, monospace; padding: 8px 16px 4px 56px; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none; border-radius: 0px;\">top&nbsp;-&nbsp;00:37:39&nbsp;up&nbsp;48&nbsp;days,&nbsp;10:41,&nbsp;&nbsp;5&nbsp;users,&nbsp;&nbsp;load&nbsp;average:&nbsp;3.34,&nbsp;3.18,&nbsp;3.10Tasks:&nbsp;166&nbsp;total,&nbsp;&nbsp;&nbsp;1&nbsp;running,&nbsp;165&nbsp;sleeping,&nbsp;&nbsp;&nbsp;0&nbsp;stopped,&nbsp;&nbsp;&nbsp;0&nbsp;zombie\r\nCpu0&nbsp;&nbsp;:&nbsp;&nbsp;0.7%us,&nbsp;&nbsp;0.3%sy,&nbsp;&nbsp;0.0%ni,&nbsp;99.0%id,&nbsp;&nbsp;0.0%wa,&nbsp;&nbsp;0.0%hi,&nbsp;&nbsp;0.0%si,&nbsp;&nbsp;0.0%stCpu1&nbsp;&nbsp;:100.0%us,&nbsp;&nbsp;0.0%sy,&nbsp;&nbsp;0.0%ni,&nbsp;&nbsp;0.0%id,&nbsp;&nbsp;0.0%wa,&nbsp;&nbsp;0.0%hi,&nbsp;&nbsp;0.0%si,&nbsp;&nbsp;0.0%stCpu2&nbsp;&nbsp;:&nbsp;&nbsp;1.3%us,&nbsp;&nbsp;0.3%sy,&nbsp;&nbsp;0.0%ni,&nbsp;98.3%id,&nbsp;&nbsp;0.0%wa,&nbsp;&nbsp;0.0%hi,&nbsp;&nbsp;0.0%si,&nbsp;&nbsp;0.0%stCpu3&nbsp;&nbsp;:&nbsp;&nbsp;0.3%us,&nbsp;&nbsp;0.0%sy,&nbsp;&nbsp;0.0%ni,&nbsp;99.7%id,&nbsp;&nbsp;0.0%wa,&nbsp;&nbsp;0.0%hi,&nbsp;&nbsp;0.0%si,&nbsp;&nbsp;0.0%stMem:&nbsp;&nbsp;16332280k&nbsp;total,&nbsp;15744336k&nbsp;used,&nbsp;&nbsp;&nbsp;587944k&nbsp;free,&nbsp;&nbsp;&nbsp;200632k&nbsp;buffers\r\nSwap:&nbsp;&nbsp;8191992k&nbsp;total,&nbsp;&nbsp;&nbsp;408724k&nbsp;used,&nbsp;&nbsp;7783268k&nbsp;free,&nbsp;&nbsp;7201204k&nbsp;cached\r\n\r\n&nbsp;&nbsp;PID&nbsp;USER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PR&nbsp;&nbsp;NI&nbsp;&nbsp;VIRT&nbsp;&nbsp;RES&nbsp;&nbsp;SHR&nbsp;S&nbsp;%CPU&nbsp;%MEM&nbsp;&nbsp;&nbsp;&nbsp;TIME+&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9702&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;100.6&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;01:47.18&nbsp;java&nbsp;-server&nbsp;-Xms512M&nbsp;-Xmx512M&nbsp;-Xmn192M&nbsp;-Xss256k&nbsp;-XX:PermSize=64M&nbsp;-XX:MaxPermSize=128M&nbsp;-verbose:\r\n&nbsp;...123456789101112</pre><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">从输出结果看，CPU load 达到3以上，服务器是4核机器，负载已经不低了。进程ID为9720的进程CPU占用率超过100%。</p><h1 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 36px; color: rgb(79, 79, 79); font-size: 28px; white-space: normal; background-color: rgb(255, 255, 255);\"><a target=\"_blank\" style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2. 定位故障的思路</h1><ul style=\"box-sizing: border-box; margin-bottom: 24px; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>首先找出问题进程内CPU占用率高的线程</p></li><li><p>再通过线程栈信息找出该线程当时在运行的问题代码段</p></li></ul><h1 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 36px; color: rgb(79, 79, 79); font-size: 28px; white-space: normal; background-color: rgb(255, 255, 255);\"><a target=\"_blank\" style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3. 定位故障的步骤</h1><h2 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 32px; color: rgb(79, 79, 79); font-size: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><a target=\"_blank\" style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.1 用top命令查找进程内导致CPU占用率高的线程</h2><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">先祭出第一招， top命令加上 -H -b 两个选项：-H 可以查看由某个进程启动的所有线程，-b 选项指定以批处理模式输出结果 。具体命令如下：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 24px; font-family: Consolas, Inconsolata, Courier, monospace; padding: 8px 16px 4px 56px; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none; border-radius: 0px;\">$&nbsp;top&nbsp;-Hbp&nbsp;9702top&nbsp;-&nbsp;00:38:54&nbsp;up&nbsp;48&nbsp;days,&nbsp;10:43,&nbsp;&nbsp;5&nbsp;users,&nbsp;&nbsp;load&nbsp;average:&nbsp;0.81,&nbsp;0.36,&nbsp;0.16Tasks:&nbsp;&nbsp;38&nbsp;total,&nbsp;&nbsp;&nbsp;1&nbsp;running,&nbsp;&nbsp;37&nbsp;sleeping,&nbsp;&nbsp;&nbsp;0&nbsp;stopped,&nbsp;&nbsp;&nbsp;0&nbsp;zombieCpu(s):&nbsp;&nbsp;3.5%us,&nbsp;&nbsp;1.4%sy,&nbsp;&nbsp;0.0%ni,&nbsp;94.5%id,&nbsp;&nbsp;0.3%wa,&nbsp;&nbsp;0.0%hi,&nbsp;&nbsp;0.2%si,&nbsp;&nbsp;0.0%stMem:&nbsp;&nbsp;16332280k&nbsp;total,&nbsp;15744500k&nbsp;used,&nbsp;&nbsp;&nbsp;587780k&nbsp;free,&nbsp;&nbsp;&nbsp;200632k&nbsp;buffersSwap:&nbsp;&nbsp;8191992k&nbsp;total,&nbsp;&nbsp;&nbsp;408724k&nbsp;used,&nbsp;&nbsp;7783268k&nbsp;free,&nbsp;&nbsp;7201392k&nbsp;cached\r\n\r\n&nbsp;&nbsp;PID&nbsp;USER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PR&nbsp;&nbsp;NI&nbsp;&nbsp;VIRT&nbsp;&nbsp;RES&nbsp;&nbsp;SHR&nbsp;S&nbsp;%CPU&nbsp;%MEM&nbsp;&nbsp;&nbsp;&nbsp;TIME+&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10007&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;R&nbsp;100.5&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;1:41.31&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9702&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.00&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9705&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:06.44&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9706&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.11&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9707&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.11&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9708&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.11&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9709&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.10&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9710&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.00&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9711&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.07&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9712&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.03&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9713&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.03&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9714&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.00&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9715&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:00.00&nbsp;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;9716&nbsp;bb&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;0&nbsp;2898m&nbsp;348m&nbsp;&nbsp;14m&nbsp;S&nbsp;&nbsp;0.0&nbsp;&nbsp;2.2&nbsp;&nbsp;&nbsp;0:05.60&nbsp;java12345678910111213141516171819202122</pre><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">输出结果里的PID其实是线程ID，可以看到线程ID为10007的线程CPU占用率为100.5%，它就是罪魁祸首。上面的命令可以再优化下：查出CPU占用率超过某个值的所有线程，例如超过50%，如下：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 24px; font-family: Consolas, Inconsolata, Courier, monospace; padding: 8px 16px 4px 56px; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none; border-radius: 0px;\">top&nbsp;-Hbp&nbsp;9702&nbsp;|&nbsp;awk&nbsp;&#39;/java/&nbsp;&amp;&amp;&nbsp;$9&gt;50&#39;1</pre><h2 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 32px; color: rgb(79, 79, 79); font-size: 24px; white-space: normal; background-color: rgb(255, 255, 255);\"><a target=\"_blank\" style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.2 用JVM命令 jstack 精确定位出问题的代码段</h2><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">第二招，用jstack 命令dump出线程栈信息，可以直接定位到出问题的代码段。这里也分两步。第一步把上面的线程ID&nbsp;<span style=\"box-sizing: border-box; font-weight: 700;\">10007</span>&nbsp;转化为十六进制：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 24px; font-family: Consolas, Inconsolata, Courier, monospace; padding: 8px 16px 4px 56px; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none; border-radius: 0px;\">$&nbsp;printf&nbsp;&quot;%x\\n&quot;&nbsp;10007271712</pre><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">因为jstack输出的线程栈信息中，线程ID是以十六进制展示的。</p><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">第二步使用命令 jstack $pid | grep “线程id” 把信息打印出来：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 24px; font-family: Consolas, Inconsolata, Courier, monospace; padding: 8px 16px 4px 56px; font-size: 14px; line-height: 22px; word-break: break-all; background-color: rgb(246, 248, 250); border: none; border-radius: 0px;\">$&nbsp;jstack&nbsp;9702&nbsp;|&nbsp;grep&nbsp;&#39;2717&#39;&nbsp;-A&nbsp;30&quot;http-nio-9092-exec-1&quot;&nbsp;daemon&nbsp;prio=10&nbsp;tid=0x00007f3a90014800&nbsp;nid=0x2717&nbsp;runnable&nbsp;[0x00007f3afc72a000]\r\n&nbsp;&nbsp;&nbsp;java.lang.Thread.State:&nbsp;RUNNABLE&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.bb.apigateway.filter.pre.SignatureTokenFilter.run(SignatureTokenFilter.java:44)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:112)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:197)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:161)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.FilterProcessor.preRoute(FilterProcessor.java:136)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.ZuulRunner.preRoute(ZuulRunner.java:105)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.http.ZuulServlet.preRoute(ZuulServlet.java:125)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:74)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:158)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequestInternal(ZuulController.java:43)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:147)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:50)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:869)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;javax.servlet.http.HttpServlet.service(HttpServlet.java:648)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;javax.servlet.http.HttpServlet.service(HttpServlet.java:729)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:261)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:115)1234567891011121314151617181920212223242526272829303132</pre><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">下面这行就是出问题的业务代码，根据实际情况修复BUG即可</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 24px; padding: 16px; border-left: 8px solid rgb(221, 223, 228); background: rgb(238, 240, 244); border-radius: 0px 5px 5px 0px; overflow: auto; word-wrap: normal; word-break: normal; color: rgb(63, 63, 63); font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; font-size: 14px; color: rgb(153, 153, 153); line-height: 22px; text-align: justify; word-wrap: break-word; word-break: normal;\">com.bb.apigateway.filter.pre.SignatureTokenFilter.run(SignatureTokenFilter.java:44)</p></blockquote><h1 style=\"margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; line-height: 36px; color: rgb(79, 79, 79); font-size: 28px; white-space: normal; background-color: rgb(255, 255, 255);\"><a target=\"_blank\" style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4. 小结</h1><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">思路：</p><ul style=\"box-sizing: border-box; margin-bottom: 24px; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>找出CPU占用率高的进程</p></li><li><p>找出问题进程内CPU占用率高的线程</p></li><li><p>通过线程栈信息找出该线程当时在运行的问题代码段</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-wrap: break-word; word-break: normal; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">实施要点：</p><ul style=\"box-sizing: border-box; margin-bottom: 24px; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>top -Hbp ‘pid’ 定位问题线程</p></li><li><p>jstack ‘pid’ | grep ‘thread_id’ 找出问题代码</p></li></ul><p><br/></p>', 85, '2020-12-31 13:37:47', 0);
INSERT INTO `article` VALUES (100, '12 条用于 Linux 的 MySQL/MariaDB 安全最佳实践', '', 'MySQL 是世界上最流行的开源数据库系统，MariaDB(一个 MySQL 分支)是世界上增长最快的开源数据库系统。在安装 MySQL 服务器之后，在默认配置下是不安全的，确保数据库安全通常是通用数据库管理的基本任务之一。\r\n\r\n这将有助于增', NULL, '<p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkFicgXkSPOxuFYtXnKlybxW6vHXwdnIlp6UBvhXniaV5D1Hqiaib3ShXIcwba0Mmibm6mKxjJkbe5nrhFA/?wx_fmt=png&wxfrom=5&wx_lazy=1\" alt=\"?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1\"/></p><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif; white-space: pre-line;\">MySQL 是世界上最流行的开源数据库系统，MariaDB(一个 MySQL 分支)是世界上增长最快的开源数据库系统。在安装 MySQL 服务器之后，在默认配置下是不安全的，确保数据库安全通常是通用数据库管理的基本任务之一。</span></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">这将有助于增强和提升整个 Linux 服务器的安全性，因为攻击者总是扫描系统任意部分的漏洞，而数据库在过去是重点目标区域。一个常见的例子是对 MySQL 数据库的 root 密码的强制破解。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">在本指南中，我们将会讲解对开发者有帮助的 MySQL/MariaDB 的 Linux 最佳安全实践。</p><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>1. 安全地安装 MySQL</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">这是安装 MySQL 服务器后第一个建议的步骤，用于保护数据库服务器。这个脚本可以帮助您提高 MySQL 服务器的安全性：</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px;\">如果您在安装期间没有设置 root 帐户的密码，马上设置它</span></span></p></li><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px;\">通过删除可从本地主机外部访问的 root 帐户来禁用远程 root 用户登录</span></span></p></li><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px;\">删除匿名用户帐户和测试数据库，默认情况下，所有用户、甚至匿名用户都可以访问这些帐户和测试数据库</span></span></p></li></ul><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"com\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(156, 148, 145); outline: 0px; line-height: 20px; font-size: 13px !important;\"># mysql_secure_installation</span></code></span></span></p></li></ol><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">在运行上述命令之后，设置 root 密码并通过输入 [Yes/Y] 和按下 [Enter] 键来回答一系列问题。</p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\"><img class=\"img_loading\" src=\"http://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkFicgXkSPOxuFYtXnKlybxW6E7VBdolLsBl4DiaPMtlKiaVGaoqelAsjeWOrm7zPG581oOJhVDQ6dh6A/?wx_fmt=png\" alt=\"?wx_fmt=png\"/></p><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px;\">安全安装 MySQL 情况界面</span></p><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>2. 将数据库服务器绑定到 Loopback 地址</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">此配置将限制来自远程机器的访问，它告诉 MySQL 服务器只接受来自本地主机的连接。你可以在主配置文件中进行设置。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"com\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(156, 148, 145); outline: 0px; line-height: 20px; font-size: 13px !important;\"># vi /etc/my.cnf &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [RHEL/CentOS] &nbsp; &nbsp;</span></code></span></span></p></li><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"com\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(156, 148, 145); outline: 0px; line-height: 20px; font-size: 13px !important;\"># vi /etc/mysql/my.conf &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[Debian/Ubuntu] </span></code></span></span></p></li><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">OR</span></code></span></span></p></li><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"com\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(156, 148, 145); outline: 0px; line-height: 20px; font-size: 13px !important;\"># vi /etc/mysql/mysql.conf.d/mysqld.cnf &nbsp; &nbsp;[Debian/Ubuntu]</span></code></span></span></p></li></ol><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">在 <code class=\"prettyprint code-in-text prettyprinted\" style=\"position: relative; overflow-y: hidden; overflow-x: auto; box-sizing: border-box; outline: 0px; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 18px; color: rgb(88, 88, 88); background: rgb(243, 241, 241); border-radius: 4px; margin: 0px 0px 24px; padding: 8px 16px 4px 56px; border: none;\"><span class=\"pun\" style=\"margin: 0px; padding: 0px 2px; box-sizing: border-box; color: rgb(102, 102, 0); outline: 0px; display: inline-block;\">[</span><span class=\"pln\" style=\"margin: 0px; padding: 0px 2px; box-sizing: border-box; color: rgb(0, 0, 0); outline: 0px; display: inline-block;\">mysqld</span><span class=\"pun\" style=\"margin: 0px; padding: 0px 2px; box-sizing: border-box; color: rgb(102, 102, 0); outline: 0px; display: inline-block;\">]</span></code> 部分中添加下面这一行</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">bind</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">-</span><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">address </span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">=</span><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\"> </span><span class=\"lit\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(223, 83, 32); outline: 0px; line-height: 20px; font-size: 13px !important;\">127.0</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">.</span><span class=\"lit\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(223, 83, 32); outline: 0px; line-height: 20px; font-size: 13px !important;\">0.1</span></code></span></span></p></li></ol><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>3. 禁用 MySQL 的 LOCAL INFILE</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">作为安全性增强的一部分，您需要禁用 <span style=\"box-sizing: border-box; outline: 0px; font-weight: 700; color: rgb(0, 0, 0);\">local_infile</span>，使用下面的指令以防止在 <code class=\"prettyprint code-in-text prettyprinted\" style=\"position: relative; overflow-y: hidden; overflow-x: auto; box-sizing: border-box; outline: 0px; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 14px; line-height: 18px; color: rgb(88, 88, 88); background: rgb(243, 241, 241); border-radius: 4px; margin: 0px 0px 24px; padding: 8px 16px 4px 56px; border: none;\"><span class=\"pun\" style=\"margin: 0px; padding: 0px 2px; box-sizing: border-box; color: rgb(102, 102, 0); outline: 0px; display: inline-block;\">[</span><span class=\"pln\" style=\"margin: 0px; padding: 0px 2px; box-sizing: border-box; color: rgb(0, 0, 0); outline: 0px; display: inline-block;\">mysqld</span><span class=\"pun\" style=\"margin: 0px; padding: 0px 2px; box-sizing: border-box; color: rgb(102, 102, 0); outline: 0px; display: inline-block;\">]</span></code> 部分从 MySQL 中访问底层文件系统。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"kwd\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(102, 102, 234); outline: 0px; line-height: 20px; font-size: 13px !important;\">local</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">-</span><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">infile</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">=</span><span class=\"lit\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(223, 83, 32); outline: 0px; line-height: 20px; font-size: 13px !important;\">0</span></code></span></span></p></li></ol><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>4. 修改 MySQL 的默认端口</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">设置端口变量用于监听 TCP/IP 连接的 MySQL 端口号。默认端口号是 3306，但是您可以在 <span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px;\">*[mysqld] *</span>中修改它。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"typ\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(64, 126, 231); outline: 0px; line-height: 20px; font-size: 13px !important;\">Port</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">=</span><span class=\"lit\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(223, 83, 32); outline: 0px; line-height: 20px; font-size: 13px !important;\">5000</span></code></span></span></p></li></ol><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>5、启用 MySQL 日志</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">日志是了解服务运行过程中发生了什么的最好的方法之一，在受到任何攻击的时候都可以很容易的从日志里看到任何入侵相关的行为。可以通过将下边的变量添加到配置文件[mysqld]部分来开启mysql日志功能。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">log</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">=</span><span class=\"str\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(123, 151, 38); outline: 0px; line-height: 20px; font-size: 13px !important;\">/var/</span><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">log</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">/</span><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">mysql</span><span class=\"pun\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">.</span><span class=\"pln\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(27, 25, 24); outline: 0px; line-height: 20px; font-size: 13px !important;\">log</span></code></span></span></p></li></ol><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>6、设置合适的 MySQL 文件的访问权限</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">确保你已经为所有的 mysql 服务文件和数据路径设置了合适的访问权限。文件 /etc/my.conf 只能由 root 用户修改，这样就可以阻止其他用户修改数据库服务的配置。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"com\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(156, 148, 145); outline: 0px; line-height: 20px; font-size: 13px !important;\"># chmod 644 /etc/my.cnf</span></code></span></span></p></li></ol><h2 style=\"font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; margin: 8px 0px 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(21, 153, 87); font-size: 24px; line-height: 1.35; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"color: rgb(78, 161, 219); outline: 0px; margin: 0px; padding: 0px; font-weight: 400; box-sizing: border-box;\"></a>7、删除 MySQL shell 历史</h2><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); line-height: 30px; min-height: 26px; text-align: justify; background-color: rgb(255, 255, 255); white-space: pre-line; font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">你在 MySQL shell 中执行的所有的命令都会被 mysql 客户端保存到一个历史文件：~/.mysql_history。这样是很危险的，因为对于你创建过的任何用户账户，所有的在 shell 输入过的用户名和密码都会记录到历史文件里面。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"margin-top: 0px; margin-bottom: 0px; padding: 8px 0px 6px; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; outline: 0px; border: none; background-color: rgb(241, 239, 238); font-family: Consolas, Inconsolata, Courier, monospace; font-size: 10px; line-height: 12px; color: rgb(80, 97, 109);\"><br/></pre><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"margin-top: 0px; margin-bottom: 16px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(79, 79, 79); line-height: 26px; min-height: 26px; text-align: justify;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; color: rgb(74, 74, 74); display: block; line-height: 22px; font-size: 14px !important;\"><span style=\"margin: 0px; padding: 0px; box-sizing: border-box; outline: 0px; line-height: 22px; display: block;\"><code style=\"box-sizing: border-box; outline: 0px; font-family: inherit !important; font-size: 10px; line-height: 12px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 4px; margin-left: -20px; border-width: 0px; white-space: pre !important;\"><span class=\"com\" style=\"margin: 0px; padding: 0px; box-sizing: border-box; color: rgb(156, 148, 145); outline: 0px; line-height: 20px; font-size: 13px !important;\"># cat /dev/null &gt; ~/.mysql_history</span></code></span></span></p></li></ol><p><br/></p>', 4, '2020-12-31 13:38:53', 0);
INSERT INTO `article` VALUES (101, 'MySQL数据库视图：视图定义、创建视图、修改视图', '', 'MySQL数据库视图：视图定义、创建视图、修改视图MySQL数据库视图：视图定义、创建视图、修改视图', NULL, '<blockquote><p>视图是指计算机数据库中的视图，是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。——百度百科</p></blockquote><p>关系型数据库中的数据是由一张一张的二维关系表所组成，简单的单表查询只需要遍历一个表，而复杂的多表查询需要将多个表连接起来进行查询任务。对于复杂的查询事件，每次查询都需要编写MySQL代码效率低下。为了解决这个问题，数据库提供了视图（view）功能。</p><h2 id=\"0-视图相关的mysql指令\"><a name=\"t0\" target=\"_blank\"></a><strong>0 视图相关的MySQL指令</strong></h2><table><thead><tr><th>操作指令</th><th>代码</th></tr></thead><tbody><tr><td>创建视图</td><td><code>CREATE VIEW 视图名(列1，列2...) AS SELECT (列1，列2...) FROM ...;</code></td></tr><tr><td>使用视图</td><td><code>当成表使用就好</code></td></tr><tr><td>修改视图</td><td><code>CREATE OR REPLACE VIEW 视图名 AS SELECT [...] FROM [...];</code></td></tr><tr><td>查看数据库已有视图</td><td><code>&gt;SHOW TABLES [like...];</code>（可以使用模糊查找）</td></tr><tr><td>查看视图详情</td><td><code>DESC 视图名</code>或者<code>SHOW FIELDS FROM 视图名</code></td></tr><tr><td>视图条件限制</td><td><code>[WITH CHECK OPTION]</code></td></tr></tbody></table><h2 id=\"1-视图\"><a name=\"t1\" target=\"_blank\"></a><strong>1 视图</strong></h2><p>百度百科定义了什么是视图，但是对缺乏相关知识的人可能还是难以理解或者只有一个比较抽象的概念，笔者举个例子来解释下什么是视图。</p><p><em>朕想要了解皇宫的国库的相关情况，想知道酒窖有什么酒，剩多少，窖藏多少年，于是派最信任的高公公去清点，高公公去国库清点后报给了朕；朕又想知道藏书情况，于是又派高公公去清点并回来报告给朕，又想知道金银珠宝如何，又派高公公清点。。。过一段时间又想知道藏书情况，高公公还得重新再去清点，皇上问一次，高公公就得跑一次路。</em></p><p><em>后来皇上觉得高公公不容易，就成立了国库管理部门，小邓子负责酒窖，小卓子负责藏书，而小六子负责金库的清点。。。后来皇上每次想了解国库就直接问话负责人，负责人就按照职责要求进行汇报。</em>&nbsp;<br><img src=\"http://img.blog.csdn.net/20170318153958211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbW94aWdhbmRhc2h1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"视图\" title=\"\"></p><p>安排专人管理后，每次皇上想要了解国库情况，就不必让高公公每次都跑一趟，而是指定的人员按照指定的任务完成指定的汇报工作就可以了。</p><p>和数据库相对应，每次进行查询工作，都需要编写查询代码进行查询</p>', 4, '2020-12-31 13:39:46', 0);
INSERT INTO `article` VALUES (102, 'Mysql ——基础篇', '', 'Mysql ——基础篇Mysql ——基础篇', NULL, '<p><img src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/0b/tootha_org.gif\" alt=\"[嘻嘻]\" data-w-e=\"1\"><br></p><div><div>原创&nbsp;2018年02月26日 16:58:26</div></div><div id=\"article_content\"><div><p><font size=\"2\" color=\"celadon\">mysql 核心技术手册 第二版</font>&nbsp;<br><em><font size=\"2\">阅读此博文假设你具备一些mysql基础知识，或者是已阅读过上一篇博文：<a href=\"http://blog.csdn.net/qq_37049781/article/details/79368517\" target=\"_blank\">mysql的安装与配置-（快速入门）</a></font></em></p><h2 id=\"创建数据库和表\"><a name=\"t0\"></a>创建数据库和表</h2><ul><li><strong>为一个虚拟的书店建立一个数据库</strong></li></ul><pre><code>CREATE DATABASE bookstore;</code><ul><li>1</li></ul></pre><p><code>!</code>通过上述语句就创建了一个 bookstore 的数据库。&nbsp;<br><font size=\"1\" color=\"red\"><em>Mysql 语句对保留字的大小写并不敏感，对数据库与表名的大小写是否敏感取决于系统。最好以保留字大写，表名等小写的形式进行书写。</em></font></p><ul><li><strong>切换数据库，查看当前数据库</strong></li></ul><pre><code>USE bookstore;\r\nSELECT DATABASE();</code><ul><li>1</li><li>2</li></ul></pre><ul><li><strong>创建一个存放图书基本信息的数据表</strong></li></ul><pre><code>CREATE TABLE books(\r\nbook_id INT,\r\ntitle VARCHAR (50),\r\nauthor vARCHAR (50)\r\n)</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul></pre><p></p><ul><br><li>查看表结构&nbsp;<br></li></ul><p></p><blockquote><p>对于接触一个表来说，这个命令可以让你更好</p></blockquote></div></div>', 6, '2020-12-31 13:56:07', 0);
INSERT INTO `article` VALUES (103, 'spring data jpa 查询自定义字段，转换为自定义实体', '', '目标：查询数据库中的字段，然后转换成 JSON 格式的数据，返回前台。', NULL, '<p><strong>环境：idea 2016.3.4， jdk 1.8， mysql 5.6， spring-boot 1.5.2</strong>&nbsp;<br><strong>背景：首先建立 entity 映射数据库（非专业 java 不知道这怎么说）</strong></p><pre><code>@Entity\r\n@Table(name = \"user\")\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n    private String userName;    // 账号\r\n    private String password;    // 密码\r\n    // getter setter 方法略过\r\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul></pre><p>然后建立与之对应的 model</p><pre><code>public class UserModel implements Serializable {\r\n    // 一些属性\r\n}</code><ul><li>1</li><li>2</li><li>3</li></ul></pre><p>这里我们分情况讨论</p><h3 id=\"首先第一种情况查询的字段与表中的字段全部对应就是查表里所有的字段但是使用-model-作为接收对象\"><a name=\"t1\"></a>首先第一种情况：查询的字段与表中的字段全部对应（就是查表里所有的字段，但是使用 Model 作为接收对象）</h3><p>这种情况比较简单，调用 Repository 提供的方法，返回一个 entity , 然后将 entity 的属性复制到 model 中。像这样</p><pre><code>UserModel user = new UserModel();\r\nUser userEntity = new User();\r\n// 一个工具类，具体使用方法请百度\r\nBeanUtils.copyProperties(user, userEntity);</code><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul></pre><h3 id=\"第二种情况只查询指定的几个字段\"><a name=\"t2\"></a>第二种情况：只查询指定的几个字段</h3><p>现在我有张表，有字段如下：</p><pre><code>@Entity\r\n@Table(name = \"user_info\")\r\npublic class UserInfo {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n    private String name = \"用户\";     // 昵称\r\n    private String signature;         // 个性签名\r\n    private String gender = \"未知\";   // 性别\r\n    private String description;       // 个人说明\r\n    private String avatar;            // 头像\r\n    private Long role;                // 权限\r\n    private Boolean disable;          // 是否冻结\r\n    private Date createTime;          // 创建时间\r\n    private Boolean isDelete;         // 是否删除\r\n    private Long userId;              // 用户 Id\r\n    // ...\r\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li></ul></pre><p>但是我只需要查询指定的几个字段，然后转换成 JSON，返回给前台，咋办呢？</p><h4 id=\"第一种方法使用-model-查询时转化\">第一种方法：使用 model 查询时转化</h4><p>首先建立一个 model ，写上自己想要查询的字段，然后写上构造函数，这步很重要，因为spring jpa 转化时会调用这个构造方法</p><pre><code>public class MyModel implements Serializable {\r\n\r\n    private String userName;\r\n    private String name;\r\n    private String gender;\r\n    private String description;\r\n\r\n    public MyModel() {};\r\n\r\n    public MyModel(String userName, String name, String gender, String description) {\r\n        this.userName = userName;\r\n        this.name = name;\r\n        this.gender = gender;\r\n        this.description = description;\r\n    }\r\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li></ul></pre><p>然后在 dao 类中写查询方法</p><pre><code>@Query(value = \"select new pers.zhuch.model.MyModel(u.userName, ui.name, ui.gender, ui.description) from UserInfo ui, User u where u.id = ui.userId\")\r\npublic List&lt;MyModel&gt; getAllRecord();</code><ul><li>1</li><li>2</li></ul></pre><p>直接在查询语句中 new model 框架底层会调用它，然后返回这个对象（这里我写了完整的类路径，不写的时候它报错说找不到类型什么的）</p><p>然后就可以获得只有指定字段的 model 了。然后就把它转成 JSON 格式就 O 了。</p><h4 id=\"第二种方法在service-里边转换成-json\">第二种方法：在service 里边转换成 JSON</h4><p>原理其实和第一种方法差不多，只是处理结果的方式不太一样，只是这种方法我们就不在 hql 中 new Model 了，直接写查询方法</p><pre><code>@Query(value = \"select new map(u.userName, ui.name, ui.gender, ui.description) from UserInfo ui, User u where u.id = ui.userId\")\r\npublic List&lt;Map&lt;String, Object&gt;&gt; getCustomField();</code><ul><li>1</li><li>2</li></ul></pre><p>直接new map（这里得是小写，不知道大写有木有问题，反正没试，编译器提示是要小写的）&nbsp;<br>然后返回的结果是这样的</p><pre><code>[\r\n    {\r\n        \"0\": \"admin\", \r\n        \"1\": \"你猜\", \r\n        \"2\": \"男\", \r\n        \"3\": \"一段描述\"\r\n    }, {\r\n        \"0\": \"abc\", \r\n        \"1\": \"你猜人家\", \r\n        \"2\": \"女\", \r\n        \"3\": \"没事先挂了\"\r\n    }\r\n]</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul></pre><p>然后在 service 层里直接封装成 JSON 对象，返回</p><pre><code>List&lt;JsonObject&gt; list = new ArrayList();\r\nfor(Map map : result) {\r\n    JsonObject j = new JsonObject();\r\n    j.addProperty(attrName, val);\r\n    ...\r\n    list.add(j);\r\n}\r\ngson.toJson(list);</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul></pre><p>还有一种返回结果，这样写：</p><pre><code>@Query(value = \"select u.userName, ui.name, ui.gender, ui.description from UserInfo ui, User u where u.id = ui.userId\")\r\npublic List&lt;Object&gt; getCustomField();</code><ul><li>1</li><li>2</li></ul></pre><p>返回结果是这样的格式：</p><pre><code>[\r\n    [\r\n        \"admin\", \r\n        \"你猜\", \r\n        \"男\", \r\n        \"一段描述\"\r\n    ], [\r\n        \"abc\", \r\n        \"你猜人家\", \r\n        \"女\", \r\n        \"没事先挂了\"\r\n    ]\r\n]</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul></pre><p>返回的是数组，也一样可以通过上面的方法转成 json ，这里我的程序中出现了一点点 BUG，就是空值的字段不会在数组中，不知道为什么。</p><p>这种方法必须明确的知道查询了哪些字段，灵活性比较差，虽然它解决了手头的问题。还有就是版本的不同，有可能会出现丢失空字段的情况，我个人特别的不喜欢这样的方法，万一我实体几十个字段，写着写着忘了写到哪了，就 over 了</p><h4 id=\"第三种方法返回一个便于转换成-json-格式的-list\">第三种方法：返回一个便于转换成 json 格式的 list</h4><p>其实和上面很相似，都是 dao 层返回一个 List &lt; Map &lt; String, Object &gt;&gt;，但是上面的结果集返回的 Map 的 key 只是列的下标，这种方式稍微理想一点点，就是 Map 的 key 就是查询的列名。但是这种方式需要实现自定义 Repository( 这里不详细介绍，请自行百度 )，并且只是 jpa 集成 hibenate 的时候可以使用。</p><pre><code>public List getCustomEntity() {\r\n    String sql = \"select t.id, t.name, t.gender, t.is_delete, t.create_time, t.description from t_entity t\";\r\n    Query query = em.createNativeQuery(sql);\r\n    // Query 接口是 spring-data-jpa 的接口，而 SQLQuery 接口是 hibenate 的接口，这里的做法就是先转成 hibenate 的查询接口对象，然后设置结果转换器\r\n    query.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);\r\n    return query.getResultList();\r\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul></pre><p>这种方法返回的就是比较标准的 JSON 格式的 java 对象了，只需要用 jackson 或者 Gson 转一下就是标准的 json 了</p><pre><code>[\r\n    {\r\n        attr: val,\r\n        ...\r\n    },\r\n    {\r\n        attr: val,\r\n        ...\r\n    },\r\n]</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul></pre><p>这种方式其实已经比较理想了，因为直接就能返回到前台，但是有时候，结果不是一条 sql 能够解决的，得两条或者以上的 sql 来解决一个复杂的查询需求，这个过程中，结果比较需要转换成 pojo，以便于组装操作。</p><h4 id=\"第四种方案dao-中直接转成-pojo-返回\">第四种方案：dao 中直接转成 pojo 返回</h4><p>这个方案还是依赖于 hibenate，有点操蛋，但是更明确一些。</p><pre><code>public List getCustomEntity() {\r\n    String sql = \"select t.id, t.name, t.gender, t.is_delete as isEnable, t.create_time as createTime, t.description from t_entity t\";\r\n    Query query = em.createNativeQuery(sql);\r\n    query.unwrap(SQLQuery.class)\r\n    // 这里是设置字段的数据类型，有几点注意，首先这里的字段名要和目标实体的字段名相同，然后 sql 语句中的名称（别名）得与实体的相同\r\n            .addScalar(\"id\", StandardBasicTypes.LONG)\r\n            .addScalar(\"name\", StandardBasicTypes.STRING)\r\n            .addScalar(\"gender\", StandardBasicTypes.STRING)\r\n            .addScalar(\"isEnable\", StandardBasicTypes.BOOLEAN)\r\n            .addScalar(\"createTime\", StandardBasicTypes.STRING)\r\n            .addScalar(\"description\", StandardBasicTypes.STRING)\r\n            .setResultTransformer(Transformers.aliasToBean(EntityModel.class));\r\n    return query.getResultList();\r\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul></pre><p>这次返回的就是 List 了。这里要注意的是 StandardBasicTypes这个常量类，在一些旧版本中，是 Hibenate 类，具体哪个包我不知道，我这个版本中是换成了前面的那个常量类</p>', 15, '2020-12-31 23:36:32', 0);
INSERT INTO `article` VALUES (104, 'Spring Boot 文件上传原理', 'Spring Boot', '　首先我们要知道什么是Spring Boot，这里简单说一下，Spring Boot可以看作是一个框架中的框架--->集成了各种框架，像security、jpa、data、cloud等等，它无须关心配置可以快速启动开发，有兴趣可以了解下自动化配置实现原理,本质上是 spring 4.0的条件化配置实现，深抛下注解，就会看到了。\r\n\r\n　　说Spring Boot 文件上传原理 其实就是Spring MVC，因为这部分工作是Spring MVC做的而不是Spring Boot，那么，SpringMVC又是怎么处理文件上传这个过程的呢？', NULL, '<div id=\"cnblogs_post_body\"><p>首先我们要知道什么是<b>Spring Boot</b><img src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png\" alt=\"[污]\" data-w-e=\"1\" style=\"font-size: 1rem;\"><span style=\"font-size: 1rem;\">，这里简单说一下，Spring Boot可以看作是一个框架中的框架---&gt;集成了各种框架，像security、jpa、data、cloud等等，它无须关心配置可以快速启动开发，有兴趣可以了解下自动化配置实现原理,本质上是 spring 4.0的条件化配置实现，深抛下注解，</span><span style=\"font-size: 1rem;\">就会看到了。</span></p><p>　　说Spring Boot 文件上传原理 其实就是Spring MVC，因为这部分工作是Spring MVC做的而不是Spring Boot，那么，SpringMVC又是怎么处理文件上传这个过程的呢？</p><p>　　图:</p><p><img src=\"https://images2018.cnblogs.com/blog/737414/201803/737414-20180313150430223-69937817.png\" alt=\"\"></p><p>　　首先项目启动加载相关配置，再执行上述第二步的时候 DispatcherServlet会去查找id为multipartResolver的Bean，在配置中看到Bean指向的是CommonsMultipartResolve，其中实现了MultipartResolver接口。</p><p>　　第四步骤这里会判断是否multipart文件即isMultipart方法，返回true：就会调用 multipartResolver 方法，传递HttpServletRequest会返回一个MultipartHttpServletRequest对象，再由DispatcherServlet进行处理到Controller层；返回false：会忽略掉，继续传递HttpServletRequest。</p><p>　　在MVC中需要在配置文件webApplicationContext.xml中配置 如下：</p><div><pre>    &lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt;\r\n            &lt;property name=\"defaultEncoding\" value=\"UTF-8\"/&gt;\r\n            &lt;property name=\"maxUploadSize\" value=\"100000000\"/&gt;\r\n            &lt;property name=\"uploadTempDir\" value=\"fileUpload/temp\"/&gt;\r\n    &lt;/bean&gt;</pre></div><p>　　而Spring Boot已经自动配置好，直接用就行，做个test没什么问题，有默认的上传限制大小(maxFileSize = \"1MB\",maxRequestSize = \"10MB\",fileSizeThreshold = \"0\")，不过在实际开发中我们还是要做一些配置的，</p><p>如下在application.properties中：</p><div><div><br></div><pre># multipart config<br>#默认支持文件上传\r\nspring.http.multipart.enabled=true<br>#文件上传目录\r\nspring.http.multipart.location=/tmp/file/images/<br>#将文件写入磁盘的阈值\r\nspring.http.multipart.file-size-threshold=5MB<br>#最大支持请求大小\r\nspring.http.multipart.max-request-size=20MB</pre></div><p>当然也可以写配置类来实现，具体的就不做展示了。</p><p>　　看完上述你肯定有个大概的了解了，这里再啰嗦下，Spring提供Multipart的解析器：MultipartResolver，上述说的是<strong>CommonsMultipartResolver，</strong>它是基于Commons File Upload第三方来实现，这也是在Servlet3.0之前的东西，3.0+之后也可以不需要依赖第三方库，可以用StandardServletMultipartResolver，同样也是实现了MultipartResolver接口，我们可以看下它的实现源码(上有注释，不再进行解析了)：</p><p>这里是之前写的test后者实现配置类，可以简单看下，作为了解：</p><div><br></div></div><div id=\"MySignature\">业精于勤荒于嬉。</div>', 16, '2020-12-31 23:46:26', 0);
INSERT INTO `article` VALUES (106, '条件运算符', '运算符', '关于条件运算符的基本操作', NULL, '<h3 cid=\"n126\" mdtype=\"heading\"><span md-inline=\"plain\">MyBatis Plus</span></h3><p cid=\"n128\" mdtype=\"paragraph\"><span md-inline=\"plain\">国产的开源框架，基于 MyBatis</span></p><p cid=\"n129\" mdtype=\"paragraph\"><span md-inline=\"plain\">核心功能就是简化 MyBatis 的开发，提高效率。</span></p><h3 cid=\"n130\" mdtype=\"heading\"><span md-inline=\"plain\">MyBatis Plus 快速上手</span></h3><p cid=\"n131\" mdtype=\"paragraph\"><span md-inline=\"plain\">Spring Boot(2.3.0) + MyBatis Plus（国产的开源框架，并没有接入到 Spring 官方孵化器中）</span></p><p cid=\"n132\" mdtype=\"paragraph\"><span md-inline=\"plain\">1、创建 Maven 工程</span></p><p cid=\"n133\" mdtype=\"paragraph\"><span md-inline=\"image\"></span></p><p cid=\"n134\" mdtype=\"paragraph\"><span md-inline=\"plain\">2、pom.xml 引入 MyBatis Plus 的依赖</span></p><pre spellcheck=\"false\" lang=\"xml\" cid=\"n135\" mdtype=\"fences\"><span role=\"presentation\">&lt;dependency&gt;</span><br><span role=\"presentation\"> &nbsp; &nbsp;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span role=\"presentation\"> &nbsp; &nbsp;&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span role=\"presentation\"> &nbsp; &nbsp;&lt;version&gt;3.3.1.tmp&lt;/version&gt;</span><br><span role=\"presentation\">&lt;/dependency&gt;</span></pre><p cid=\"n136\" mdtype=\"paragraph\"><span md-inline=\"plain\">3、创建实体类</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n137\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.mybatisplus.entity;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">import lombok.Data;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">@Data</span><br><span role=\"presentation\">public class User {</span><br><span role=\"presentation\"> &nbsp; &nbsp;private Integer id;</span><br><span role=\"presentation\"> &nbsp; &nbsp;private String name;</span><br><span role=\"presentation\"> &nbsp; &nbsp;private Integer age;</span><br><span role=\"presentation\">}</span></pre><p cid=\"n138\" mdtype=\"paragraph\"><span md-inline=\"plain\">4、创建 Mapper 接口</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n139\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.mybatisplus.mapper;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span role=\"presentation\">import com.southwind.mybatisplus.entity.User;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public interface UserMapper extends BaseMapper&lt;User&gt; {</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">}</span></pre><p cid=\"n140\" mdtype=\"paragraph\"><span md-inline=\"plain\">5、application.yml</span></p><pre spellcheck=\"false\" lang=\"yaml\" cid=\"n141\" mdtype=\"fences\"><span role=\"presentation\">spring:</span><br><span role=\"presentation\">  datasource:</span><br><span role=\"presentation\"> &nbsp;  driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span role=\"presentation\"> &nbsp;  url: jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span role=\"presentation\"> &nbsp;  username: root</span><br><span role=\"presentation\"> &nbsp;  password: root</span><br><span role=\"presentation\">mybatis-plus:</span><br><span role=\"presentation\">  configuration:</span><br><span role=\"presentation\"> &nbsp;  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></pre><p cid=\"n142\" mdtype=\"paragraph\"><span md-inline=\"plain\">6、启动类需要添加 @MapperScan(\"mapper所在的包\")，否则无法加载 Mppaer bean。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n143\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.mybatisplus;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">import org.mybatis.spring.annotation.MapperScan;</span><br><span role=\"presentation\">import org.springframework.boot.SpringApplication;</span><br><span role=\"presentation\">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">@SpringBootApplication</span><br><span role=\"presentation\">@MapperScan(\"com.southwind.mybatisplus.mapper\")</span><br><span role=\"presentation\">public class MybatisplusApplication {</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\"> &nbsp; &nbsp;public static void main(String[] args) {</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp; &nbsp;SpringApplication.run(MybatisplusApplication.class, args);</span><br><span role=\"presentation\"> &nbsp;  }</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">}</span></pre><p cid=\"n144\" mdtype=\"paragraph\"><span md-inline=\"plain\">7、测试</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n145\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.mybatisplus.mapper;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">import org.junit.jupiter.api.Test;</span><br><span role=\"presentation\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span role=\"presentation\">import org.springframework.boot.test.context.SpringBootTest;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">@SpringBootTest</span><br><span role=\"presentation\">class UserMapperTest {</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\"> &nbsp; &nbsp;@Autowired</span><br><span role=\"presentation\"> &nbsp; &nbsp;private UserMapper mapper;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\"> &nbsp; &nbsp;@Test</span><br><span role=\"presentation\"> &nbsp; &nbsp;void test(){</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp; &nbsp;mapper.selectList(null).forEach(System.out::println);</span><br><span role=\"presentation\"> &nbsp;  }</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">}</span></pre><p cid=\"n146\" mdtype=\"paragraph\"></p><h3 cid=\"n147\" mdtype=\"heading\"><span md-inline=\"plain\">常用注解</span></h3><blockquote cid=\"n148\" mdtype=\"blockquote\"><p cid=\"n149\" mdtype=\"paragraph\"><span md-inline=\"plain\">@TableName</span></p></blockquote><p cid=\"n150\" mdtype=\"paragraph\"><span md-inline=\"plain\">映射数据库的表名</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n151\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.mybatisplus.entity;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">import com.baomidou.mybatisplus.annotation.TableName;</span><br><span role=\"presentation\">import lombok.Data;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">@Data</span><br><span role=\"presentation\">@TableName(value = \"user\")</span><br><span role=\"presentation\">public class Account {</span><br><span role=\"presentation\"> &nbsp; &nbsp;private Integer id;</span><br><span role=\"presentation\"> &nbsp; &nbsp;private String name;</span><br><span role=\"presentation\"> &nbsp; &nbsp;private Integer age;</span><br><span role=\"presentation\">}</span></pre><p cid=\"n152\" mdtype=\"paragraph\"></p><blockquote cid=\"n153\" mdtype=\"blockquote\"><p cid=\"n154\" mdtype=\"paragraph\"><span md-inline=\"plain\">@TableId</span></p></blockquote><p cid=\"n155\" mdtype=\"paragraph\"><span md-inline=\"plain\">设置主键映射，value 映射主键字段名</span></p><p cid=\"n156\" mdtype=\"paragraph\"><span md-inline=\"plain\">type 设置主键类型，主键的生成策略，</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n157\" mdtype=\"fences\"><span role=\"presentation\">AUTO(0),</span><br><span role=\"presentation\">NONE(1),</span><br><span role=\"presentation\">INPUT(2),</span><br><span role=\"presentation\">ASSIGN_ID(3),</span><br><span role=\"presentation\">ASSIGN_UUID(4),</span><br><span role=\"presentation\">/** @deprecated */</span><br><span role=\"presentation\">@Deprecated</span><br><span role=\"presentation\">ID_WORKER(3),</span><br><span role=\"presentation\">/** @deprecated */</span><br><span role=\"presentation\">@Deprecated</span><br><span role=\"presentation\">ID_WORKER_STR(3),</span><br><span role=\"presentation\">/** @deprecated */</span><br><span role=\"presentation\">@Deprecated</span><br><span role=\"presentation\">UUID(4);</span></pre><figure cid=\"n158\" mdtype=\"table\"><table><thead><tr cid=\"n159\" mdtype=\"table_row\"><th><span cid=\"n160\" mdtype=\"table_cell\"><span md-inline=\"plain\">值</span></span></th><th><span cid=\"n161\" mdtype=\"table_cell\"><span md-inline=\"plain\">描述</span></span></th></tr></thead><tbody><tr cid=\"n162\" mdtype=\"table_row\"><td><span cid=\"n163\" mdtype=\"table_cell\"><span md-inline=\"plain\">AUTO</span></span></td><td><span cid=\"n164\" mdtype=\"table_cell\"><span md-inline=\"plain\">数据库自增</span></span></td></tr><tr cid=\"n165\" mdtype=\"table_row\"><td><span cid=\"n166\" mdtype=\"table_cell\"><span md-inline=\"plain\">NONE</span></span></td><td><span cid=\"n167\" mdtype=\"table_cell\"><span md-inline=\"plain\">MP set 主键，雪花算法实现</span></span></td></tr><tr cid=\"n168\" mdtype=\"table_row\"><td><span cid=\"n169\" mdtype=\"table_cell\"><span md-inline=\"plain\">INPUT</span></span></td><td><span cid=\"n170\" mdtype=\"table_cell\"><span md-inline=\"plain\">需要开发者手动赋值</span></span></td></tr><tr cid=\"n171\" mdtype=\"table_row\"><td><span cid=\"n172\" mdtype=\"table_cell\"><span md-inline=\"plain\">ASSIGN_ID</span></span></td><td><span cid=\"n173\" mdtype=\"table_cell\"><span md-inline=\"plain\">MP 分配 ID，Long、Integer、String</span></span></td></tr><tr cid=\"n174\" mdtype=\"table_row\"><td><span cid=\"n175\" mdtype=\"table_cell\"><span md-inline=\"plain\">ASSIGN_UUID</span></span></td><td><span cid=\"n176\" mdtype=\"table_cell\"><span md-inline=\"plain\">分配 UUID，Strinig</span></span></td></tr></tbody></table></figure><p cid=\"n177\" mdtype=\"paragraph\"><span md-inline=\"plain\">INPUT 如果开发者没有手动赋值，则数据库通过自增的方式给主键赋值，如果开发者手动赋值，则存入该值。</span></p><p cid=\"n178\" mdtype=\"paragraph\"><span md-inline=\"plain\">AUTO 默认就是数据库自增，开发者无需赋值。</span></p><p cid=\"n179\" mdtype=\"paragraph\"><span md-inline=\"plain\">ASSIGN_ID MP 自动赋值，雪花算法。</span></p><p cid=\"n180\" mdtype=\"paragraph\"><span md-inline=\"plain\">ASSIGN_UUID 主键的数据类型必须是 String，自动生成 UUID 进行赋值</span></p><p cid=\"n181\" mdtype=\"paragraph\"></p><blockquote cid=\"n182\" mdtype=\"blockquote\"><p cid=\"n183\" mdtype=\"paragraph\"><span md-inline=\"plain\">@TableField</span></p></blockquote><p cid=\"n184\" mdtype=\"paragraph\"><span md-inline=\"plain\">映射非主键字段，value 映射字段名</span></p><p cid=\"n185\" mdtype=\"paragraph\"><span md-inline=\"plain\">exist 表示是否为数据库字段 false，如果实体类中的成员变量在数据库中没有对应的字段，则可以使用 exist，VO、DTO</span></p><p cid=\"n186\" mdtype=\"paragraph\"><span md-inline=\"plain\">select 表示是否查询该字段</span></p><p cid=\"n187\" mdtype=\"paragraph\"><span md-inline=\"plain\">fill 表示是否自动填充，将对象存入数据库的时候，由 MyBatis Plus 自动给某些字段赋值，create_time、update_time</span></p><p cid=\"n188\" mdtype=\"paragraph\"><span md-inline=\"plain\">1、给表添加 create_time、update_time 字段</span></p><p cid=\"n189\" mdtype=\"paragraph\"><span md-inline=\"plain\">2、实体类中添加成员变量</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n190\" mdtype=\"fences\">package com.southwind.mybatisplus.entity;\r\n\r\nimport com.baomidou.mybatisplus.annotation.FieldFill;\r\nimport com.baomidou.mybatisplus.annotation.TableField;\r\nimport com.baomidou.mybatisplus.annotation.TableId;\r\nimport com.baomidou.mybatisplus.annotation.TableName;\r\nimport lombok.Data;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\n@TableName(value = \"user\")\r\npublic class User {\r\n    @TableId\r\n    private String id;\r\n    @TableField(value = \"name\",select = false)\r\n    private String title;\r\n    private Integer age;\r\n    @TableField(exist = false)\r\n    private String gender;\r\n    @TableField(fill = FieldFill.INSERT)\r\n    private Date createTime;\r\n    @TableField(fill = FieldFill.INSERT_UPDATE)\r\n    private Date updateTime;\r\n}</pre><p cid=\"n191\" mdtype=\"paragraph\"><span md-inline=\"plain\">3、创建自动填充处理器</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n192\" mdtype=\"fences\">package com.southwind.mybatisplus.handler;\r\n\r\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\r\nimport org.apache.ibatis.reflection.MetaObject;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Date;\r\n\r\n@Component\r\npublic class MyMetaObjectHandler implements MetaObjectHandler {\r\n    @Override\r\n    public void insertFill(MetaObject metaObject) {\r\n        this.setFieldValByName(\"createTime\",new Date(),metaObject);\r\n        this.setFieldValByName(\"updateTime\",new Date(),metaObject);\r\n    }\r\n\r\n    @Override\r\n    public void updateFill(MetaObject metaObject) {\r\n        this.setFieldValByName(\"updateTime\",new Date(),metaObject);\r\n    }\r\n}</pre><p cid=\"n193\" mdtype=\"paragraph\"></p><blockquote cid=\"n194\" mdtype=\"blockquote\"><p cid=\"n195\" mdtype=\"paragraph\"><span md-inline=\"plain\">@Version</span></p></blockquote><p cid=\"n196\" mdtype=\"paragraph\"><span md-inline=\"plain\">标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会以 version 作为条件，当条件成立的时候才会修改成功。</span></p><p cid=\"n197\" mdtype=\"paragraph\"><span md-inline=\"plain\">version = 2</span></p><p cid=\"n198\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程 1:update ... set version = 2  where version = 1</span></p><p cid=\"n199\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程2 ：update ... set version = 2 where version = 1</span></p><p cid=\"n200\" mdtype=\"paragraph\"><span md-inline=\"plain\">1、数据库表添加 version 字段，默认值为 1</span></p><p cid=\"n201\" mdtype=\"paragraph\"><span md-inline=\"plain\">2、实体类添加 version 成员变量，并且添加 @Version </span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n202\" mdtype=\"fences\">package com.southwind.mybatisplus.entity;\r\n\r\nimport com.baomidou.mybatisplus.annotation.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\n@TableName(value = \"user\")\r\npublic class User {\r\n    @TableId\r\n    private String id;\r\n    @TableField(value = \"name\",select = false)\r\n    private String title;\r\n    private Integer age;\r\n    @TableField(exist = false)\r\n    private String gender;\r\n    @TableField(fill = FieldFill.INSERT)\r\n    private Date createTime;\r\n    @TableField(fill = FieldFill.INSERT_UPDATE)\r\n    private Date updateTime;\r\n    @Version\r\n    private Integer version;\r\n}</pre><p cid=\"n203\" mdtype=\"paragraph\"><span md-inline=\"plain\">3、注册配置类</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n204\" mdtype=\"fences\">package com.southwind.mybatisplus.config;\r\n\r\nimport com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class MyBatisPlusConfig {\r\n    \r\n    @Bean\r\n    public OptimisticLockerInterceptor optimisticLockerInterceptor(){\r\n        return new OptimisticLockerInterceptor();\r\n    }\r\n    \r\n}</pre><p cid=\"n205\" mdtype=\"paragraph\"></p><blockquote cid=\"n206\" mdtype=\"blockquote\"><p cid=\"n207\" mdtype=\"paragraph\"><span md-inline=\"plain\">@EnumValue</span></p></blockquote><p cid=\"n208\" mdtype=\"paragraph\"><span md-inline=\"plain\">1、通用枚举类注解，将数据库字段映射成实体类的枚举类型成员变量</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n209\" mdtype=\"fences\">package com.southwind.mybatisplus.enums;\r\n\r\nimport com.baomidou.mybatisplus.annotation.EnumValue;\r\n\r\npublic enum StatusEnum {\r\n    WORK(1,\"上班\"),\r\n    REST(0,\"休息\");\r\n\r\n    StatusEnum(Integer code, String msg) {\r\n        this.code = code;\r\n        this.msg = msg;\r\n    }\r\n\r\n    @EnumValue\r\n    private Integer code;\r\n    private String msg;\r\n}</pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n210\" mdtype=\"fences\">package com.southwind.mybatisplus.entity;\r\n\r\nimport com.baomidou.mybatisplus.annotation.*;\r\nimport com.southwind.mybatisplus.enums.StatusEnum;\r\nimport lombok.Data;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\n@TableName(value = \"user\")\r\npublic class User {\r\n    @TableId\r\n    private String id;\r\n    @TableField(value = \"name\",select = false)\r\n    private String title;\r\n    private Integer age;\r\n    @TableField(exist = false)\r\n    private String gender;\r\n    @TableField(fill = FieldFill.INSERT)\r\n    private Date createTime;\r\n    @TableField(fill = FieldFill.INSERT_UPDATE)\r\n    private Date updateTime;\r\n    @Version\r\n    private Integer version;\r\n    private StatusEnum status;\r\n}</pre><p cid=\"n211\" mdtype=\"paragraph\"><span md-inline=\"plain\">application.yml</span></p><pre spellcheck=\"false\" lang=\"yaml\" cid=\"n212\" mdtype=\"fences\">type-enums-package: \r\n  com.southwind.mybatisplus.enums</pre><p cid=\"n213\" mdtype=\"paragraph\"><span md-inline=\"plain\">2、实现接口</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n214\" mdtype=\"fences\">package com.southwind.mybatisplus.enums;\r\n\r\nimport com.baomidou.mybatisplus.core.enums.IEnum;\r\n\r\npublic enum AgeEnum implements IEnum&lt;Integer&gt; {\r\n    ONE(1,\"一岁\"),\r\n    TWO(2,\"两岁\"),\r\n    THREE(3,\"三岁\");\r\n\r\n    private Integer code;\r\n    private String msg;\r\n\r\n    AgeEnum(Integer code, String msg) {\r\n        this.code = code;\r\n        this.msg = msg;\r\n    }\r\n\r\n    @Override\r\n    public Integer getValue() {\r\n        return this.code;\r\n    }\r\n}</pre><p cid=\"n215\" mdtype=\"paragraph\"></p><blockquote cid=\"n216\" mdtype=\"blockquote\"><p cid=\"n217\" mdtype=\"paragraph\"><span md-inline=\"plain\">@TableLogic</span></p></blockquote><p cid=\"n218\" mdtype=\"paragraph\"><span md-inline=\"plain\">映射逻辑删除</span></p><p cid=\"n219\" mdtype=\"paragraph\"><span md-inline=\"plain\">1、数据表添加 deleted 字段</span></p><p cid=\"n220\" mdtype=\"paragraph\"><span md-inline=\"plain\">2、实体类添加注解</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n221\" mdtype=\"fences\">package com.southwind.mybatisplus.entity;\r\n\r\nimport com.baomidou.mybatisplus.annotation.*;\r\nimport com.southwind.mybatisplus.enums.AgeEnum;\r\nimport com.southwind.mybatisplus.enums.StatusEnum;\r\nimport lombok.Data;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\n@TableName(value = \"user\")\r\npublic class User {\r\n    @TableId\r\n    private String id;\r\n    @TableField(value = \"name\",select = false)\r\n    private String title;\r\n    private AgeEnum age;\r\n    @TableField(exist = false)\r\n    private String gender;\r\n    @TableField(fill = FieldFill.INSERT)\r\n    private Date createTime;\r\n    @TableField(fill = FieldFill.INSERT_UPDATE)\r\n    private Date updateTime;\r\n    @Version\r\n    private Integer version;\r\n    @TableField(value = \"status\")\r\n    private StatusEnum statusEnum;\r\n    @TableLogic\r\n    private Integer deleted;\r\n}</pre><p cid=\"n222\" mdtype=\"paragraph\"><span md-inline=\"plain\">3、application.yml 添加配置</span></p><pre spellcheck=\"false\" lang=\"yaml\" cid=\"n223\" mdtype=\"fences\">global-config:\r\n  db-config:\r\n    logic-not-delete-value: 0\r\n    logic-delete-value: 1</pre><p cid=\"n224\" mdtype=\"paragraph\"></p><h3 cid=\"n225\" mdtype=\"heading\"><span md-inline=\"plain\">查询</span></h3><pre spellcheck=\"false\" lang=\"java\" cid=\"n226\" mdtype=\"fences\">//mapper.selectList(null);\r\nQueryWrapper wrapper = new QueryWrapper();\r\n//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();\r\n//        map.put(\"name\",\"小红\");\r\n//        map.put(\"age\",3);\r\n//        wrapper.allEq(map);\r\n//        wrapper.gt(\"age\",2);\r\n//        wrapper.ne(\"name\",\"小红\");\r\n//        wrapper.ge(\"age\",2);\r\n\r\n//like \'%小\'\r\n//        wrapper.likeLeft(\"name\",\"小\");\r\n//like \'小%\'\r\n//        wrapper.likeRight(\"name\",\"小\");\r\n\r\n//inSQL\r\n//        wrapper.inSql(\"id\",\"select id from user where id &lt; 10\");\r\n//        wrapper.inSql(\"age\",\"select age from user where age &gt; 3\");\r\n\r\n//        wrapper.orderByDesc(\"age\");\r\n\r\n//        wrapper.orderByAsc(\"age\");\r\n//        wrapper.having(\"id &gt; 8\");\r\n\r\nmapper.selectList(wrapper).forEach(System.out::println);</pre><p cid=\"n227\" mdtype=\"paragraph\"></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n228\" mdtype=\"fences\">//        System.out.println(mapper.selectById(7));\r\n//        mapper.selectBatchIds(Arrays.asList(7,8,9)).forEach(System.out::println);\r\n\r\n//Map 只能做等值判断，逻辑判断需要使用 Wrapper 来处理\r\n//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();\r\n//        map.put(\"id\",7);\r\n//        mapper.selectByMap(map).forEach(System.out::println);\r\n\r\nQueryWrapper wrapper = new QueryWrapper();\r\nwrapper.eq(\"id\",7);\r\n////        System.out.println(mapper.selectCount(wrapper));\r\n//\r\n//        //将查询的结果集封装到Map中\r\n//        mapper.selectMaps(wrapper).forEach(System.out::println);\r\n//        System.out.println(\"-------------------\");\r\n//        mapper.selectList(wrapper).forEach(System.out::println);\r\n\r\n//分页查询\r\n//        Page&lt;User&gt; page = new Page&lt;&gt;(2,2);\r\n//        Page&lt;User&gt; result = mapper.selectPage(page,null);\r\n//        System.out.println(result.getSize());\r\n//        System.out.println(result.getTotal());\r\n//        result.getRecords().forEach(System.out::println);\r\n\r\n//        Page&lt;Map&lt;String,Object&gt;&gt; page = new Page&lt;&gt;(1,2);\r\n//        mapper.selectMapsPage(page,null).getRecords().forEach(System.out::println);\r\n\r\n//        mapper.selectObjs(null).forEach(System.out::println);\r\n\r\n\r\nSystem.out.println(mapper.selectOne(wrapper));</pre><p cid=\"n229\" mdtype=\"paragraph\"></p><h3 cid=\"n230\" mdtype=\"heading\"><span md-inline=\"plain\">自定义 SQL（多表关联查询）</span></h3><pre spellcheck=\"false\" lang=\"java\" cid=\"n231\" mdtype=\"fences\">package com.southwind.mybatisplus.entity;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class ProductVO {\r\n    private Integer category;\r\n    private Integer count;\r\n    private String description;\r\n    private Integer userId;\r\n    private String userName;\r\n}</pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n232\" mdtype=\"fences\">package com.southwind.mybatisplus.mapper;\r\n\r\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\r\nimport com.southwind.mybatisplus.entity.ProductVO;\r\nimport com.southwind.mybatisplus.entity.User;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport java.util.List;\r\n\r\npublic interface UserMapper extends BaseMapper&lt;User&gt; {\r\n    @Select(\"select p.*,u.name userName from product p,user u where p.user_id = u.id and u.id = #{id}\")\r\n    List&lt;ProductVO&gt; productList(Integer id);\r\n}</pre><p cid=\"n233\" mdtype=\"paragraph\"></p><h3 cid=\"n234\" mdtype=\"heading\"><span md-inline=\"plain\">添加</span></h3><pre spellcheck=\"false\" lang=\"java\" cid=\"n235\" mdtype=\"fences\">User user = new User();\r\nuser.setTitle(\"小明\");\r\nuser.setAge(22);\r\nmapper.insert(user);\r\nSystem.out.println(user);</pre><p cid=\"n236\" mdtype=\"paragraph\"></p><h3 cid=\"n237\" mdtype=\"heading\"><span md-inline=\"plain\">删除</span></h3><pre spellcheck=\"false\" lang=\"java\" cid=\"n238\" mdtype=\"fences\">//mapper.deleteById(1);\r\n//        mapper.deleteBatchIds(Arrays.asList(7,8));\r\n//        QueryWrapper wrapper = new QueryWrapper();\r\n//        wrapper.eq(\"age\",14);\r\n//        mapper.delete(wrapper);\r\n\r\nMap&lt;String,Object&gt; map = new HashMap&lt;&gt;();\r\nmap.put(\"id\",10);\r\nmapper.deleteByMap(map);</pre><p cid=\"n239\" mdtype=\"paragraph\"></p><h3 cid=\"n240\" mdtype=\"heading\"><span md-inline=\"plain\">修改</span></h3><pre spellcheck=\"false\" lang=\"\" cid=\"n241\" mdtype=\"fences\">//        //update ... version = 3 where version = 2\r\n//        User user = mapper.selectById(7);\r\n//        user.setTitle(\"一号\");\r\n//\r\n//        //update ... version = 3 where version = 2\r\n//        User user1 = mapper.selectById(7);\r\n//        user1.setTitle(\"二号\");\r\n//\r\n//        mapper.updateById(user1);\r\n//        mapper.updateById(user);\r\n\r\nUser user = mapper.selectById(1);\r\nuser.setTitle(\"小红\");\r\nQueryWrapper wrapper = new QueryWrapper();\r\nwrapper.eq(\"age\",22);\r\nmapper.update(user,wrapper);</pre><p cid=\"n242\" mdtype=\"paragraph\"></p><h3 cid=\"n243\" mdtype=\"heading\"><span md-inline=\"plain\">MyBatisPlus 自动生成</span></h3><p cid=\"n244\" mdtype=\"paragraph\"><span md-inline=\"plain\">根据数据表自动生成实体类、Mapper、Service、ServiceImpl、Controller</span></p><p cid=\"n245\" mdtype=\"paragraph\"><span md-inline=\"plain\">1、pom.xml 导入 MyBatis Plus Generator</span></p><pre spellcheck=\"false\" lang=\"xml\" cid=\"n246\" mdtype=\"fences\">&lt;dependency&gt;\r\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\r\n    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\r\n    &lt;version&gt;3.3.1.tmp&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\r\n    &lt;artifactId&gt;velocity&lt;/artifactId&gt;\r\n    &lt;version&gt;1.7&lt;/version&gt;\r\n&lt;/dependency&gt;</pre><p cid=\"n247\" mdtype=\"paragraph\"><span md-inline=\"plain\">Velocity（默认）、Freemarker、Beetl</span></p><p cid=\"n248\" mdtype=\"paragraph\"><span md-inline=\"plain\">2、启动类</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n249\" mdtype=\"fences\">package com.southwind.mybatisplus;\r\n\r\nimport com.baomidou.mybatisplus.annotation.DbType;\r\nimport com.baomidou.mybatisplus.generator.AutoGenerator;\r\nimport com.baomidou.mybatisplus.generator.config.DataSourceConfig;\r\nimport com.baomidou.mybatisplus.generator.config.GlobalConfig;\r\nimport com.baomidou.mybatisplus.generator.config.PackageConfig;\r\nimport com.baomidou.mybatisplus.generator.config.StrategyConfig;\r\nimport com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        //创建generator对象\r\n        AutoGenerator autoGenerator = new AutoGenerator();\r\n        //数据源\r\n        DataSourceConfig dataSourceConfig = new DataSourceConfig();\r\n        dataSourceConfig.setDbType(DbType.MYSQL);\r\n        dataSourceConfig.setUrl(\"jdbc:mysql://ip:3306/db?useUnicode=true&amp;characterEncoding=UTF-8\");\r\n        dataSourceConfig.setUsername(\"root\");\r\n        dataSourceConfig.setPassword(\"root\");\r\n        dataSourceConfig.setDriverName(\"com.mysql.cj.jdbc.Driver\");\r\n        autoGenerator.setDataSource(dataSourceConfig);\r\n        //全局配置\r\n        GlobalConfig globalConfig = new GlobalConfig();\r\n        globalConfig.setOutputDir(System.getProperty(\"user.dir\")+\"/src/main/java\");\r\n        globalConfig.setOpen(false);\r\n        globalConfig.setAuthor(\"southwind\");\r\n        globalConfig.setServiceName(\"%sService\");\r\n        autoGenerator.setGlobalConfig(globalConfig);\r\n        //包信息\r\n        PackageConfig packageConfig = new PackageConfig();\r\n        packageConfig.setParent(\"com.southwind.mybatisplus\");\r\n        packageConfig.setModuleName(\"generator\");\r\n        packageConfig.setController(\"controller\");\r\n        packageConfig.setService(\"service\");\r\n        packageConfig.setServiceImpl(\"service.impl\");\r\n        packageConfig.setMapper(\"mapper\");\r\n        packageConfig.setEntity(\"entity\");\r\n        autoGenerator.setPackageInfo(packageConfig);\r\n        //配置策略\r\n        StrategyConfig strategyConfig = new StrategyConfig();\r\n        strategyConfig.setEntityLombokModel(true);\r\n        strategyConfig.setNaming(NamingStrategy.underline_to_camel);\r\n        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);\r\n        autoGenerator.setStrategy(strategyConfig);\r\n\r\n        autoGenerator.execute();\r\n    }\r\n}</pre><h3 cid=\"n250\" mdtype=\"heading\"><span md-inline=\"plain\">Spring Boot + MyBatis Plus 打包应用，直接发布 阿里云 上云</span></h3><p><br></p>', 14, '2021-01-08 13:09:47', 1);
INSERT INTO `article` VALUES (107, '流程控制', '流程控制', 'switch-case\r\n\r\n与 if 不同的是，switch-case 只能完成等值判断，而无法完成判断大小。\r\n\r\n如果是判断两个值是否相等，可以使用 switch-case，如果比较两个值的大小关系，则不能使用 switch-case。\r\n\r\nswitch 支持 int、short、byte、char、枚举、String 类型，不支持 boolean 类型。', NULL, '<h3 cid=\"n66\" mdtype=\"heading\"><span md-inline=\"plain\">流程控制</span></h3><ul cid=\"n68\" mdtype=\"list\"><li cid=\"n69\" mdtype=\"list_item\"><p cid=\"n70\" mdtype=\"paragraph\"><span md-inline=\"plain\">switch-case</span></p></li></ul><p cid=\"n71\" mdtype=\"paragraph\"><span md-inline=\"plain\">与 if 不同的是，switch-case 只能完成等值判断，而无法完成判断大小。</span></p><p cid=\"n72\" mdtype=\"paragraph\"><span md-inline=\"plain\">如果是判断两个值是否相等，可以使用 switch-case，如果比较两个值的大小关系，则不能使用 switch-case。</span></p><p cid=\"n73\" mdtype=\"paragraph\"><span md-inline=\"plain\">switch 支持 int、short、byte、char、枚举、String 类型，不支持 boolean 类型。</span></p><p cid=\"n74\" mdtype=\"paragraph\"><span md-inline=\"plain\">基本语法</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n75\" mdtype=\"fences\"><span role=\"presentation\">switch(变量){</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>case 值1:</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>//业务代码</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>break；</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>case 值2:</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>//业务代码</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>breka;</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>...</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>default:</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>//业务代码</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>break;</span><br><span role=\"presentation\">}</span></pre><p cid=\"n76\" mdtype=\"paragraph\"><span md-inline=\"plain\">case 判断变量是否等于某个值，default 表示所有的 case 都不成立的情况下所执行的代码。</span></p><ul cid=\"n77\" mdtype=\"list\"><li cid=\"n78\" mdtype=\"list_item\"><p cid=\"n79\" mdtype=\"paragraph\"><span md-inline=\"plain\">1 奖励 2000</span></p></li><li cid=\"n80\" mdtype=\"list_item\"><p cid=\"n81\" mdtype=\"paragraph\"><span md-inline=\"plain\">2 奖励 1000</span></p></li><li cid=\"n82\" mdtype=\"list_item\"><p cid=\"n83\" mdtype=\"paragraph\"><span md-inline=\"plain\">3 奖励 500</span></p></li><li cid=\"n84\" mdtype=\"list_item\"><p cid=\"n85\" mdtype=\"paragraph\"><span md-inline=\"plain\">否则没有奖励</span></p></li></ul><pre spellcheck=\"false\" lang=\"java\" cid=\"n86\" mdtype=\"fences\"><span role=\"presentation\">public static void main(String[] args) {</span><br><span role=\"presentation\"> &nbsp;int placing = 1;</span><br><span role=\"presentation\"> &nbsp;if(placing == 1) {</span><br><span role=\"presentation\"> &nbsp; &nbsp;System.out.println(\"奖励2000元\");</span><br><span role=\"presentation\">  }else {</span><br><span role=\"presentation\"> &nbsp; &nbsp;if(placing == 2) {</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"奖励1000元\");</span><br><span role=\"presentation\"> &nbsp;  }else {</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;if(placing == 3) {</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"奖励500元\");</span><br><span role=\"presentation\"> &nbsp; &nbsp;  }else{</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"没有奖励\");</span><br><span role=\"presentation\"> &nbsp; &nbsp;  }</span><br><span role=\"presentation\"> &nbsp;  }</span><br><span role=\"presentation\">  }</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\"> &nbsp;switch(placing) {</span><br><span role=\"presentation\"> &nbsp; &nbsp;case 1:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"奖励2000元\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\"> &nbsp; &nbsp;case 2:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"奖励1000元\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\"> &nbsp; &nbsp;case 3:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"奖励500元\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\"> &nbsp; &nbsp;default:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"没有奖励\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\">  }</span><br><span role=\"presentation\">}</span></pre><p cid=\"n87\" mdtype=\"paragraph\"></p><h3 cid=\"n88\" mdtype=\"heading\"><span md-inline=\"plain\">循环</span></h3><p cid=\"n89\" mdtype=\"paragraph\"><span md-inline=\"plain\">for、while、do-while、foreach</span></p><p cid=\"n90\" mdtype=\"paragraph\"><span md-inline=\"plain\">循环四要素：</span></p><ul cid=\"n91\" mdtype=\"list\"><li cid=\"n92\" mdtype=\"list_item\"><p cid=\"n93\" mdtype=\"paragraph\"><span md-inline=\"plain\">初始化循环变量</span></p></li><li cid=\"n94\" mdtype=\"list_item\"><p cid=\"n95\" mdtype=\"paragraph\"><span md-inline=\"plain\">循环条件</span></p></li><li cid=\"n96\" mdtype=\"list_item\"><p cid=\"n97\" mdtype=\"paragraph\"><span md-inline=\"plain\">循环体</span></p></li><li cid=\"n98\" mdtype=\"list_item\"><p cid=\"n99\" mdtype=\"paragraph\"><span md-inline=\"plain\">更新循环变量</span></p></li></ul><p cid=\"n100\" mdtype=\"paragraph\"><span md-inline=\"plain\">while</span></p><pre spellcheck=\"false\" lang=\"\" cid=\"n101\" mdtype=\"fences\"><span role=\"presentation\">初始化循环变量</span><br><span role=\"presentation\">while(循环条件){</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>循环体</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>更新循环变量</span><br><span role=\"presentation\">}</span></pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n102\" mdtype=\"fences\"><span role=\"presentation\">//初始化循环变量</span><br><span role=\"presentation\">int num = 0;</span><br><span role=\"presentation\">//循环条件</span><br><span role=\"presentation\">while(num &lt; 10) {</span><br><span role=\"presentation\"> &nbsp;//循环体</span><br><span role=\"presentation\"> &nbsp;System.out.println(\"Hello World\");</span><br><span role=\"presentation\"> &nbsp;//更新循环变量</span><br><span role=\"presentation\"> &nbsp;num++;</span><br><span role=\"presentation\">}</span></pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n103\" mdtype=\"fences\"><span role=\"presentation\">int num = 0;</span><br><span role=\"presentation\">String flag = \"y\";</span><br><span role=\"presentation\">while(flag.equals(\"y\")) {</span><br><span role=\"presentation\"> &nbsp;System.out.print(\"请输入学生学号：\");</span><br><span role=\"presentation\"> &nbsp;Scanner scanner = new Scanner(System.in);</span><br><span role=\"presentation\"> &nbsp;int id = scanner.nextInt();</span><br><span role=\"presentation\"> &nbsp;switch(id) {</span><br><span role=\"presentation\"> &nbsp; &nbsp;case 1:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"张三的成绩是96\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\"> &nbsp; &nbsp;case 2:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"李四的成绩是91\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\"> &nbsp; &nbsp;case 3:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"王五的成绩是89\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\"> &nbsp; &nbsp;default:</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;System.out.println(\"请输入正确的学号\");</span><br><span role=\"presentation\"> &nbsp; &nbsp; &nbsp;break;</span><br><span role=\"presentation\">  }</span><br><span role=\"presentation\"> &nbsp;System.out.print(\"是否继续？y/n\");</span><br><span role=\"presentation\"> &nbsp;flag = scanner.next();</span><br><span role=\"presentation\">}</span><br><span role=\"presentation\">System.out.println(\"感谢使用学生成绩查询系统\");</span></pre><p cid=\"n104\" mdtype=\"paragraph\"></p><p cid=\"n105\" mdtype=\"paragraph\"><span md-inline=\"plain\">do-while</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n106\" mdtype=\"fences\"><span role=\"presentation\">//初始化循环变量</span><br><span role=\"presentation\">int num = 0;</span><br><span role=\"presentation\">do {</span><br><span role=\"presentation\"> &nbsp;//循环体</span><br><span role=\"presentation\"> &nbsp;System.out.println(\"Hello World\");</span><br><span role=\"presentation\"> &nbsp;//更新循环变量</span><br><span role=\"presentation\"> &nbsp;num++;</span><br><span role=\"presentation\">}while(num&lt;10);</span><br><span role=\"presentation\">//循环条件</span></pre><p cid=\"n107\" mdtype=\"paragraph\"></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n108\" mdtype=\"fences\"><span role=\"presentation\">Scanner scanner = new Scanner(System.in);</span><br><span role=\"presentation\">String result = \"\";</span><br><span role=\"presentation\">do {</span><br><span role=\"presentation\"> &nbsp;System.out.println(\"张三参加体能测试，跑1000米\");</span><br><span role=\"presentation\"> &nbsp;System.out.print(\"是否合格？y/n\");</span><br><span role=\"presentation\"> &nbsp;result = scanner.next();</span><br><span role=\"presentation\">}while(result.equals(\"n\"));</span><br><span role=\"presentation\">System.out.println(\"合格，通过测试\");</span></pre><p cid=\"n109\" mdtype=\"paragraph\"></p><p cid=\"n110\" mdtype=\"paragraph\"><span md-inline=\"plain\">for</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n111\" mdtype=\"fences\"><span role=\"presentation\">for(初始化循环变量;循环条件;更新循环变量){</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>循环体</span><br><span role=\"presentation\">}</span></pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n112\" mdtype=\"fences\">for(int num = 0;num &lt; 10;num++) {\r\n  System.out.println(\"Hello World\");\r\n}</pre><p cid=\"n113\" mdtype=\"paragraph\"></p><p cid=\"n114\" mdtype=\"paragraph\"><span md-inline=\"plain\">while、do-while、for 3种循环的区别</span></p><ul cid=\"n115\" mdtype=\"list\"><li cid=\"n116\" mdtype=\"list_item\"><p cid=\"n117\" mdtype=\"paragraph\"><span md-inline=\"plain\">相同点：都遵循循环四要素，初始化循环变量、循环条件、循环体、更新循环变量。</span></p></li><li cid=\"n118\" mdtype=\"list_item\"><p cid=\"n119\" mdtype=\"paragraph\"><span md-inline=\"plain\">不同点：</span></p><ul cid=\"n120\" mdtype=\"list\"><li cid=\"n121\" mdtype=\"list_item\"><p cid=\"n122\" mdtype=\"paragraph\"><span md-inline=\"plain\">while 和 do-while 适用于循环次数不确定的业务场景；for 适用于循环次数确定的场景。</span></p></li><li cid=\"n123\" mdtype=\"list_item\"><p cid=\"n124\" mdtype=\"paragraph\"><span md-inline=\"plain\">while 和 for 都是先判断循环条件，再执行循环体；do-while 先执行循环体，再判断循环条件。</span></p></li></ul></li></ul><p cid=\"n125\" mdtype=\"paragraph\"></p><p cid=\"n126\" mdtype=\"paragraph\"><span md-inline=\"plain\">分别使用 while、do-while、for 循环输出 10 以内的所有奇数。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n127\" mdtype=\"fences\">//while循环\r\nint num = 0;\r\nwhile(num &lt;= 10) {\r\n  if(num%2!=0) {\r\n    System.out.println(num);\r\n  }\r\n  num++;\r\n}\r\n//do-while循环\r\nint num = 0;\r\ndo {\r\n  if(num%2!=0) {\r\n    System.out.println(num);\r\n  }\r\n  num++;\r\n}while(num &lt;= 10);\r\n//for循环\r\nfor(int num = 0;num &lt;= 10;num++) {\r\n  if(num%2!=0) {\r\n    System.out.println(num);\r\n  }\r\n}</pre><p cid=\"n128\" mdtype=\"paragraph\"></p><p cid=\"n129\" mdtype=\"paragraph\"><span md-inline=\"plain\">for 循环只适用于循环次数确定的场景下(for 也可以适用于循环次数不确定的场景，只不过一般不会用这种方式进行开发)，while 和 do-while 循环次数确定或者不确定都可以使用。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n130\" mdtype=\"fences\">String result = \"n\";\r\nfor(;result.equals(\"n\");) {\r\n  System.out.println(\"张三参加体能测试，跑1000米\");\r\n  System.out.print(\"是否合格？y/n\");\r\n  result = scanner.next();\r\n}\r\nSystem.out.println(\"合格，通过测试\");</pre><p><br></p>', 0, '2021-01-08 15:06:59', 0);
INSERT INTO `article` VALUES (108, '数组', '数组的基本要素', '数组的基本要素', NULL, '<h3 cid=\"n37\" mdtype=\"heading\"><span md-inline=\"plain\">数组</span></h3><p cid=\"n39\" mdtype=\"paragraph\"><span md-inline=\"plain\">数组就是一种可以存储大量数据类型相同的变量的数据结构，数组就是一个具有相同数据类型的数据集合。</span></p><p cid=\"n40\" mdtype=\"paragraph\"><span md-inline=\"plain\">数组中的数据必须是同一种数据类型的。</span></p><h3 cid=\"n41\" mdtype=\"heading\"><span md-inline=\"plain\">数组的基本要素</span></h3><ul cid=\"n42\" mdtype=\"list\"><li cid=\"n43\" mdtype=\"list_item\"><p cid=\"n44\" mdtype=\"paragraph\"><span md-inline=\"plain\">数组名称</span></p></li><li cid=\"n45\" mdtype=\"list_item\"><p cid=\"n46\" mdtype=\"paragraph\"><span md-inline=\"plain\">数组元素</span></p></li><li cid=\"n47\" mdtype=\"list_item\"><p cid=\"n48\" mdtype=\"paragraph\"><span md-inline=\"plain\">元素下标</span></p></li><li cid=\"n49\" mdtype=\"list_item\"><p cid=\"n50\" mdtype=\"paragraph\"><span md-inline=\"plain\">数据类型</span></p></li></ul><p cid=\"n51\" mdtype=\"paragraph\"><span md-inline=\"plain\">数组本身就是一个变量，数组名称就是变量名，数组中保存的每一个数据都会有一个下标（从 0 开始）</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n52\" mdtype=\"fences\"><span role=\"presentation\">//声明数组</span><br><span role=\"presentation\">int[] array;</span><br><span role=\"presentation\">//分配内存空间</span><br><span role=\"presentation\">array = new int[6];</span><br><span role=\"presentation\">//给数组赋值</span><br><span role=\"presentation\">array[0] = 1;</span><br><span role=\"presentation\">array[1] = 2;</span><br><span role=\"presentation\">array[2] = 3;</span><br><span role=\"presentation\">array[3] = 4;</span><br><span role=\"presentation\">array[4] = 5;</span><br><span role=\"presentation\">array[5] = 6;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">int[] array2 = {1,2,3,4,5,6};</span><br><span role=\"presentation\">int[] array3 = new int[]{1,2,3,4,5,6};</span></pre><p cid=\"n53\" mdtype=\"paragraph\"></p><h3 cid=\"n54\" mdtype=\"heading\"><span md-inline=\"plain\">数组常见的错误</span></h3><ul cid=\"n55\" mdtype=\"list\"><li cid=\"n56\" mdtype=\"list_item\"><p cid=\"n57\" mdtype=\"paragraph\"><span md-inline=\"plain\">数据类型不匹配。</span></p></li><li cid=\"n58\" mdtype=\"list_item\"><p cid=\"n59\" mdtype=\"paragraph\"><span md-inline=\"plain\">边声明边赋值的方式，代码必须写在同一行，不能换行。</span></p></li><li cid=\"n60\" mdtype=\"list_item\"><p cid=\"n61\" mdtype=\"paragraph\"><span md-inline=\"plain\">数组下标越界。</span></p></li></ul><p cid=\"n62\" mdtype=\"paragraph\"></p><h3 cid=\"n63\" mdtype=\"heading\"><span md-inline=\"plain\">数组的常用操作及方法</span></h3><ul cid=\"n64\" mdtype=\"list\"><li cid=\"n65\" mdtype=\"list_item\"><p cid=\"n66\" mdtype=\"paragraph\"><span md-inline=\"plain\">求数组的最大值</span></p></li><li cid=\"n67\" mdtype=\"list_item\"><p cid=\"n68\" mdtype=\"paragraph\"><span md-inline=\"plain\">求数组的最小值</span></p></li><li cid=\"n69\" mdtype=\"list_item\"><p cid=\"n70\" mdtype=\"paragraph\"><span md-inline=\"plain\">在数组的指定位置插入数据</span></p></li><li cid=\"n71\" mdtype=\"list_item\"><p cid=\"n72\" mdtype=\"paragraph\"><span md-inline=\"plain\">对数组进行排序</span></p></li></ul><p><br></p>', 0, '2021-01-08 15:07:27', 0);
INSERT INTO `article` VALUES (109, '二维数组', '二维数组', '二维数组\r\n二维数组简单理解即一维数组中保存的值是另外一个一维数组。\r\n\r\n变量、数据类型、流程控制、循环、数组。', NULL, '<h3 cid=\"n20\" mdtype=\"heading\"><span md-inline=\"plain\">二维数组</span></h3><p cid=\"n22\" mdtype=\"paragraph\"><span md-inline=\"plain\">二维数组简单理解即一维数组中保存的值是另外一个一维数组。</span></p><p cid=\"n23\" mdtype=\"paragraph\"><span md-inline=\"plain\">变量、数据类型、流程控制、循环、数组。</span></p><p cid=\"n24\" mdtype=\"paragraph\"><span md-inline=\"plain\">用户管理系统</span></p><ul cid=\"n25\" mdtype=\"list\"><li cid=\"n26\" mdtype=\"list_item\"><p cid=\"n27\" mdtype=\"paragraph\"><span md-inline=\"plain\">查询用户：将系统中保存的全部用户信息在控制台打印输出。</span></p></li><li cid=\"n28\" mdtype=\"list_item\"><p cid=\"n29\" mdtype=\"paragraph\"><span md-inline=\"plain\">添加用户：向系统中添加新的用户信息，如果添加的用户已经存在，给出提示信息。</span></p></li><li cid=\"n30\" mdtype=\"list_item\"><p cid=\"n31\" mdtype=\"paragraph\"><span md-inline=\"plain\">删除用户：输入用户名，进行删除操作，若输入的用户名不存在，给出提示信息。</span></p></li><li cid=\"n32\" mdtype=\"list_item\"><p cid=\"n33\" mdtype=\"paragraph\"><span md-inline=\"plain\">账号冻结：输入用户名，进行冻结操作，若输入的用户名不存在或者该用户已经被冻结，给出相应提示。</span></p></li><li cid=\"n34\" mdtype=\"list_item\"><p cid=\"n35\" mdtype=\"paragraph\"><span md-inline=\"plain\">账号解冻：输入用户名，进行解封操作，若输入的用户名不存在或者该用户状态正常，给出相应提示。</span></p></li><li cid=\"n36\" mdtype=\"list_item\"><p cid=\"n37\" mdtype=\"paragraph\"><span md-inline=\"plain\">退出系统：跳出循环，给出提示信息。</span></p></li></ul><p><br></p><p cid=\"n38\" mdtype=\"paragraph\"></p>', 0, '2021-01-08 15:07:52', 0);
INSERT INTO `article` VALUES (110, '面向对象', '面向对象', '', NULL, '<h3 cid=\"n42\" mdtype=\"heading\"><span md-inline=\"plain\">面向对象</span></h3><p cid=\"n44\" mdtype=\"paragraph\"><span md-inline=\"plain\">面向对象编程思想：将程序模块化的思想。</span></p><ul cid=\"n45\" mdtype=\"list\"><li cid=\"n46\" mdtype=\"list_item\"><p cid=\"n47\" mdtype=\"paragraph\"><span md-inline=\"plain\">什么是面向对象？</span></p></li></ul><p cid=\"n48\" mdtype=\"paragraph\"><span md-inline=\"plain\">面向对象编程思想诞生之前，程序开发采用的是面向过程的结构化编程方式，是一种面向功能划分的软件结构。</span></p><p cid=\"n49\" mdtype=\"paragraph\"><span md-inline=\"plain\">最小粒度细化到方法这一层。</span></p><p cid=\"n50\" mdtype=\"paragraph\"><span md-inline=\"plain\">面向过程注重的是每一个步骤，面向对象关注点在于整件事情的模块化结构。</span></p><ul cid=\"n51\" mdtype=\"list\"><li cid=\"n52\" mdtype=\"list_item\"><p cid=\"n53\" mdtype=\"paragraph\"><span md-inline=\"plain\">类和对象</span></p></li></ul><p cid=\"n54\" mdtype=\"paragraph\"><span md-inline=\"plain\">类和对象的关系</span></p><p cid=\"n55\" mdtype=\"paragraph\"><span md-inline=\"plain\">每个对象都有特定的特征：1、属性。2、方法。</span></p><p cid=\"n56\" mdtype=\"paragraph\"><span md-inline=\"plain\">属性指的是对象的静态特征，方法用来描述对象的动态特征。</span></p><p cid=\"n57\" mdtype=\"paragraph\"><span md-inline=\"plain\">对象是用来描述客观存在的一个实体，改实体是由一组属性和方法构成。</span></p><p cid=\"n58\" mdtype=\"paragraph\"><span md-inline=\"plain\">类是与对象紧密结合的另外一个概念，类是产生对象的模版，所有的对象都是通过类来创建的。</span></p><p cid=\"n59\" mdtype=\"paragraph\"><span md-inline=\"plain\">二者的关系：类是对象的抽象化描述，这些对象具有相同的特征和动作（属性和方法）。</span></p><p cid=\"n60\" mdtype=\"paragraph\"><span md-inline=\"plain\">对象是类的具体实例。</span></p><p cid=\"n61\" mdtype=\"paragraph\"><span md-inline=\"plain\">Java 程序是以类位组织单元，程序运行时的主体是通过类创建的具体对象。</span></p><h3 cid=\"n62\" mdtype=\"heading\"><span md-inline=\"plain\">定义类</span></h3><pre spellcheck=\"false\" lang=\"\" cid=\"n63\" mdtype=\"fences\"><span role=\"presentation\">public class 类名{</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>//定义属性，属性名符合驼峰式命名法</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public 数据类型 属性名;</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>//定义方法，方法名符合驼峰式命名法</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public 返回值类型 方法名(参数列表:数据类型 参数名){</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>//方法体</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\">}</span></pre><p cid=\"n64\" mdtype=\"paragraph\"><span md-inline=\"plain\">Java 关于返回值的定义分为两类：有返回值和无返回值，有返回值的方法需要在方法定义时指定返回值的数据类型，并在方法体中用 return 将结果返回给外部调用者，加法运算。</span></p><p cid=\"n65\" mdtype=\"paragraph\"><span md-inline=\"plain\">如果一个方法不需要进行返回操作，将返回值类型定义为 void。</span></p><p cid=\"n66\" mdtype=\"paragraph\"><span md-inline=\"plain\">参数列表是指外部在调用该方法时需要传入到方法内部进行运算的数据。</span></p><p cid=\"n67\" mdtype=\"paragraph\"></p><h3 cid=\"n68\" mdtype=\"heading\"><span md-inline=\"plain\">构造函数、构造方法、构造器</span></h3><p cid=\"n69\" mdtype=\"paragraph\"><span md-inline=\"plain\">构造函数是一种特殊的方法，普通方法是用来描述某个动作的，构造方法是用来创建对象的。</span></p><ul cid=\"n70\" mdtype=\"list\"><li cid=\"n71\" mdtype=\"list_item\"><p cid=\"n72\" mdtype=\"paragraph\"><span md-inline=\"plain\">方法名必须与类名一致。</span></p></li><li cid=\"n73\" mdtype=\"list_item\"><p cid=\"n74\" mdtype=\"paragraph\"><span md-inline=\"plain\">不需要定义返回值类型。</span></p></li></ul><p cid=\"n75\" mdtype=\"paragraph\"><span md-inline=\"plain\">构造函数可分为有参构造和无参构造，有参构造是指带参数的构造函数，无参构造是指没有参数的构造函数。</span></p><p cid=\"n76\" mdtype=\"paragraph\"><span md-inline=\"plain\">任何一个类都默认自带一个无参构造函数，如果手动在类中定义一个有参构造，则会覆盖默认的无参构造。</span></p><p cid=\"n77\" mdtype=\"paragraph\"></p><h3 cid=\"n78\" mdtype=\"heading\"><span md-inline=\"plain\">this 关键字</span></h3><p cid=\"n79\" mdtype=\"paragraph\"><span md-inline=\"plain\">this 用来指代当前类的实例化对象，通过 this 可以调用当前类的属性和方法，比如在有参构造中，通过 this 将外部传入的值赋给当前类的实例化对象。</span></p><p cid=\"n80\" mdtype=\"paragraph\"><span md-inline=\"plain\">this 除了可以在类中访问属性也可以在类中调用方法，类中的方法可以分为两类：构造方法、普通方法。</span></p><p cid=\"n81\" mdtype=\"paragraph\"><span md-inline=\"plain\">用 this 调用这两类方法的语法也不同，调用构造函数的语法是 this(参数列表)，不能在普通方法中使用 this 调用构造函数。</span></p><p cid=\"n82\" mdtype=\"paragraph\"><span md-inline=\"plain\">用 this 调用普通方法，this.方法名(参数列表)，可以在构造函数中使用，也可以在普通方法中使用。</span></p><p><br></p>', 0, '2021-01-08 15:08:11', 0);
INSERT INTO `article` VALUES (111, 'Java 多线程的实现', 'Java 多线程的实现', 'Java 多线程的实现', NULL, '<h3 cid=\"n68\" mdtype=\"heading\"><span md-inline=\"plain\">Java 多线程的实现</span></h3><ul cid=\"n70\" mdtype=\"list\"><li cid=\"n71\" mdtype=\"list_item\"><p cid=\"n72\" mdtype=\"paragraph\"><span md-inline=\"plain\">继承 Thread</span></p></li><li cid=\"n73\" mdtype=\"list_item\"><p cid=\"n74\" mdtype=\"paragraph\"><span md-inline=\"plain\">实现 Runnable</span></p></li></ul><h3 cid=\"n75\" mdtype=\"heading\"><span md-inline=\"plain\">线程调度</span></h3><ul cid=\"n76\" mdtype=\"list\"><li cid=\"n77\" mdtype=\"list_item\"><p cid=\"n78\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程休眠</span></p></li></ul><p cid=\"n79\" mdtype=\"paragraph\"><span md-inline=\"plain\">让当前线程暂停执行，从运行状态进入阻塞状态，将 CPU 资源让给其他线程的调度方式，通过 sleep() 来实现。</span></p><p cid=\"n80\" mdtype=\"paragraph\"><span md-inline=\"plain\">sleep(long millis)，调用时需要传入休眠时间，单位为豪秒。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n81\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.test;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public class MyThread extends Thread{</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>@Override</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public void run() {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated method stub</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>for(int i=0;i&lt;10;i++) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>if(i == 5) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>try {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>sleep(5000);</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>} catch (InterruptedException e) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated catch block</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>e.printStackTrace();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>System.out.println(i+\"---------MyThread\");</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\">}</span></pre><p cid=\"n82\" mdtype=\"paragraph\"><span md-inline=\"plain\">也可以在类的外部调用 sleep 方法。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n83\" mdtype=\"fences\"><span role=\"presentation\">MyThread2 thread = new MyThread2();</span><br><span role=\"presentation\">try {</span><br><span role=\"presentation\"> &nbsp;thread.sleep(5000);</span><br><span role=\"presentation\">} catch (InterruptedException e) {</span><br><span role=\"presentation\"> &nbsp;// TODO Auto-generated catch block</span><br><span role=\"presentation\"> &nbsp;e.printStackTrace();</span><br><span role=\"presentation\">}</span><br><span role=\"presentation\">thread.start();</span></pre><p cid=\"n84\" mdtype=\"paragraph\"><span md-inline=\"plain\">在外部调用需要注意，休眠一定要放在启动之前。</span></p><p cid=\"n85\" mdtype=\"paragraph\"><span md-inline=\"plain\">如何让主线程休眠？直接通过静态方式调用 sleep 方法。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n86\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.test;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public class Test2 {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public static void main(String[] args) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>for(int i=0;i&lt;10;i++) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>if(i == 5) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>try {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>Thread.sleep(3000);</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>} catch (InterruptedException e) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated catch block</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>e.printStackTrace();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>System.out.println(i+\"+++++Test2+++++\");</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\">}</span></pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n87\" mdtype=\"fences\"><span role=\"presentation\">public static native void sleep(long millis) throws InterruptedException;</span></pre><p cid=\"n88\" mdtype=\"paragraph\"><span md-inline=\"plain\">sleep 是静态本地方法，可以通过类调用，也可以通过对象调用，方法定义抛出 InterruptedException，InterruptedException 继承 Exception，外部调用时必须手动处理异常。</span></p><ul cid=\"n89\" mdtype=\"list\"><li cid=\"n90\" mdtype=\"list_item\"><p cid=\"n91\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程合并</span></p></li></ul><p cid=\"n92\" mdtype=\"paragraph\"><span md-inline=\"plain\">合并是指将指定的某个线程加入到当前线程中，合并为一个线程，由两个线程交替执行变成一个线程中的两个自线程顺序执行。</span></p><p cid=\"n93\" mdtype=\"paragraph\"><span md-inline=\"plain\">通过调用  join 方法来实现合并，具体如何合并？</span></p><p cid=\"n94\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程甲和线程乙，线程甲执行到某个时间点的时候调用线程乙的 join方法，则表示从当前时间点开始 CPU 资源被线程乙独占，线程甲进入阻塞状态，直到线程乙执行完毕，线程甲进入就绪状态，等待获取 CPU 资源进入运行状态。</span></p><p cid=\"n95\" mdtype=\"paragraph\"><span md-inline=\"plain\">join 方法重载，join() 表示乙线程执行完毕之后才能执行其他线程，join(long millis) 表示乙线程执行 millis 毫秒之后，无论是否执行完毕，其他线程都可以和它争夺 CPU 资源。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n96\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.test;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public class JoinRunnable implements Runnable {</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>@Override</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public void run() {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated method stub</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>for(int i=0;i&lt;200;i++) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>System.out.println(i+\"------JoinRunnable\");</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">}</span></pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n97\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.test;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public class JoinTest {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public static void main(String[] args) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>/**</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span> * 两个线程，主线程、join线程</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span> * 主线程的逻辑：当i==10，join线程合并到主线程中</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span> */</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>JoinRunnable joinRunnable = new JoinRunnable();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>Thread thread = new Thread(joinRunnable);</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>thread.start();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>for(int i=0;i&lt;100;i++) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>if(i == 10) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>try {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>thread.join();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>} catch (InterruptedException e) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated catch block</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>e.printStackTrace();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>System.out.println(i+\"main+++++++++\");</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\">}</span></pre><p cid=\"n98\" mdtype=\"paragraph\"></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n99\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.test;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public class JoinRunnable2 implements Runnable {</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>@Override</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public void run() {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated method stub</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>for(int i=0;i&lt;20;i++) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>try {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>Thread.sleep(1000);</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>} catch (InterruptedException e) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated catch block</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>e.printStackTrace();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>System.out.println(i+\"--------JoinRunnable\");</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">}</span></pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n100\" mdtype=\"fences\"><span role=\"presentation\">package com.southwind.test;</span><br><span role=\"presentation\"><span cm-text=\"\"></span></span><br><span role=\"presentation\">public class Test2 {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>public static void main(String[] args) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>for(int i=0;i&lt;10;i++) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>if(i == 5) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>try {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>Thread.sleep(3000);</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>} catch (InterruptedException e) {</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>// TODO Auto-generated catch block</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>e.printStackTrace();</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>System.out.println(i+\"+++++Test2+++++\");</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\"><span role=\"presentation\" cm-text=\"	\">    </span>}</span><br><span role=\"presentation\">}</span></pre><p cid=\"n101\" mdtype=\"paragraph\"></p><h3 cid=\"n102\" mdtype=\"heading\"><span md-inline=\"plain\">线程礼让</span></h3><p cid=\"n103\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程礼让是指在某个特定的时间点，让线程暂停抢占 CPU 资源的行为，运行状态/就绪状态---》阻塞状态，将 CPU 资源让给其他线程来使用。</span></p><p cid=\"n104\" mdtype=\"paragraph\"><span md-inline=\"plain\">假如线程甲和线程乙在交替执行，某个时间点线程甲做出了礼让，所以在这个时间节点线程乙拥有了 CPU 资源，执行业务逻辑，但不代表线程甲一直暂停执行。</span></p><p cid=\"n105\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程甲只是在特定的时间节点礼让，过了时间节点，线程甲再次进入就绪状态，和线程乙争夺 CPU 资源。</span></p><p cid=\"n106\" mdtype=\"paragraph\"><span md-inline=\"plain\">通过 yield 方法实现。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n107\" mdtype=\"fences\">package com.southwind.yield;\r\n\r\npublic class YieldThread1 extends Thread {\r\n	@Override\r\n	public void run() {\r\n		// TODO Auto-generated method stub\r\n		for(int i = 0; i &lt; 10;i++) {\r\n			if(i == 5) {\r\n				yield();\r\n			}\r\n			System.out.println(Thread.currentThread().getName()+\"-----\"+i);\r\n		}\r\n	}\r\n}</pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n108\" mdtype=\"fences\">package com.southwind.yield;\r\n\r\npublic class YieldThread2 extends Thread {\r\n	@Override\r\n	public void run() {\r\n		// TODO Auto-generated method stub\r\n		for(int i=0;i&lt;10;i++) {\r\n			System.out.println(Thread.currentThread().getName()+\"======\"+i);\r\n		}\r\n	}\r\n}</pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n109\" mdtype=\"fences\">package com.southwind.yield;\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		YieldThread1 thread = new YieldThread1();\r\n		thread.setName(\"线程1\");\r\n		YieldThread2 thread2 = new YieldThread2();\r\n		thread2.setName(\"线程2\");\r\n		thread.start();\r\n		thread2.start();\r\n	}\r\n}</pre><h3 cid=\"n110\" mdtype=\"heading\"><span md-inline=\"plain\">线程中断</span></h3><p cid=\"n111\" mdtype=\"paragraph\"><span md-inline=\"plain\">有很多种情况会造成线程停止运行：</span></p><p cid=\"n112\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程执行完毕自动停止</span></p><p cid=\"n113\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程执行过程中遇到错误抛出异常并停止</span></p><p cid=\"n114\" mdtype=\"paragraph\"><span md-inline=\"plain\">线程执行过程中根据需求手动停止</span></p><p cid=\"n115\" mdtype=\"paragraph\"><span md-inline=\"plain\">Java 中实现线程中断有如下几个常用方法：</span></p><ul cid=\"n116\" mdtype=\"list\"><li cid=\"n117\" mdtype=\"list_item\"><p cid=\"n118\" mdtype=\"paragraph\"><span md-inline=\"plain\">public void stop()</span></p></li><li cid=\"n119\" mdtype=\"list_item\"><p cid=\"n120\" mdtype=\"paragraph\"><span md-inline=\"plain\">public void interrupt()</span></p></li><li cid=\"n121\" mdtype=\"list_item\"><p cid=\"n122\" mdtype=\"paragraph\"><span md-inline=\"plain\">public boolean isInterrupted()</span></p></li></ul><p cid=\"n123\" mdtype=\"paragraph\"><span md-inline=\"plain\">stop 方法在新版本的 JDK 已经不推荐使用，重点关注后两个方法。</span></p><p cid=\"n124\" mdtype=\"paragraph\"><span md-inline=\"plain\">interrupt 是一个实例方法，当一个线程对象调用该方法时，表示中断当前线程对象。</span></p><p cid=\"n125\" mdtype=\"paragraph\"><span md-inline=\"plain\">每个线程对象都是通过一个标志位来判断当前是否为中断状态。</span></p><p cid=\"n126\" mdtype=\"paragraph\"><span md-inline=\"plain\">isInterrupted 就是用来获取当前线程对象的标志位：true 表示清除了标志位，当前线程已经中断；false 表示没有清除标志位，当前对象没有中断。</span></p><p cid=\"n127\" mdtype=\"paragraph\"><span md-inline=\"plain\">当一个线程对象处于不同的状态时，中断机制也是不同的。</span></p><p cid=\"n128\" mdtype=\"paragraph\"><span md-inline=\"plain\">创建状态：实例化线程对象，不启动。</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n129\" mdtype=\"fences\">package com.southwind.interrupted;\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		Thread thread = new Thread();\r\n		System.out.println(thread.getState());\r\n		thread.interrupt();\r\n		System.out.println(thread.isInterrupted());\r\n	}\r\n}</pre><p cid=\"n130\" mdtype=\"paragraph\"><span md-inline=\"image\"></span></p><p cid=\"n131\" mdtype=\"paragraph\"><span md-inline=\"plain\">NEW 表示当前线程对象为创建状态，false 表示当前线程并未中断，因为当前线程没有启动，不存在中断，不需要清除标志位。</span></p><p cid=\"n132\" mdtype=\"paragraph\"><span md-inline=\"plain\">匿名内部类</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n133\" mdtype=\"fences\">Thread thread = new Thread(new Runnable() {\r\n\r\n  @Override\r\n  public void run() {\r\n    // TODO Auto-generated method stub\r\n    for(int i = 0; i &lt; 10;i++) {\r\n      System.out.println(i+\"---main\");\r\n    }\r\n  }\r\n});\r\nthread.start();</pre><pre spellcheck=\"false\" lang=\"java\" cid=\"n134\" mdtype=\"fences\">package com.southwind.interrupted;\r\n\r\npublic class Test2 {\r\n	public static void main(String[] args) {\r\n//		MyRunnable runnable = new MyRunnable();\r\n//		Thread thread = new Thread(runnable);\r\n//		thread.start();\r\n		\r\n		Thread thread = new Thread(new Runnable() {\r\n			\r\n			@Override\r\n			public void run() {\r\n				// TODO Auto-generated method stub\r\n				for(int i = 0; i &lt; 10;i++) {\r\n					System.out.println(i+\"---main\");\r\n				}\r\n			}\r\n		});\r\n		thread.start();\r\n		System.out.println(thread.getState());\r\n		thread.interrupt();\r\n		System.out.println(thread.isInterrupted());\r\n		System.out.println(thread.getState());\r\n	}\r\n}</pre><p><br></p>', 0, '2021-01-08 15:08:40', 0);

-- ----------------------------
-- Table structure for catalog
-- ----------------------------
DROP TABLE IF EXISTS `catalog`;
CREATE TABLE `catalog`  (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '栏目名称',
  `keywords` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '栏目关键词',
  `desc` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '栏目描述',
  `type` tinyint(1) NOT NULL DEFAULT 0 COMMENT '栏目类型 0：列表；1：留言',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of catalog
-- ----------------------------
INSERT INTO `catalog` VALUES (1, 'PHP', 'PHP', 'PHP', 0);
INSERT INTO `catalog` VALUES (2, '数据库', '数据库', '数据库', 0);
INSERT INTO `catalog` VALUES (3, 'Java', 'Java', 'Java', 0);
INSERT INTO `catalog` VALUES (4, '生活感悟', '生活感悟', '生活感悟', 0);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `article_id` bigint(20) NOT NULL COMMENT '文章id',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '评论内容',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '评论日期',
  `name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '留言者昵称',
  `email` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '留言者邮箱',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (1, 93, '写的不错。', '2021-01-01 13:34:39', '追梦人', 'hty@qq.com');
INSERT INTO `comment` VALUES (9, 91, '留言测试', '2021-01-01 13:34:27', '雨云天下', '550188448@qq.com');
INSERT INTO `comment` VALUES (11, 104, '测试', '2021-01-01 11:11:35', 'skiiy', 'wdadadwa@qq.com');
INSERT INTO `comment` VALUES (12, 106, '测试一下评论', '2021-01-08 13:22:00', 'hty', '550188448@qq.com');

SET FOREIGN_KEY_CHECKS = 1;
